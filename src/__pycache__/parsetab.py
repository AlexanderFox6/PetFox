
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEAND ASSIGN BOOLEAN BRYK CHAR COMMENT CONZORP DIVIDE ELIL ELZ EOF EQUAL_TO FLOP FLORP FOX FRZ GREATER_THAN GREATER_THAN_EQUAL IDENTIFIER ILF LCURLY LESS_THAN LESS_THAN_EQUAL LPAREN MINUS NEWLINE NI NOL NOT NOT_EQUAL_TO NUMBER OR PET PLITZ PLUS RCURLY RPAREN RYTORN STRING TIMES TLIP WHILKstart : statementsstatements : statements statement\n                  | statementstatement : expression\n                 | conditionalexpression : expression PLUS term\n                  | expression MINUS term\n                  | expression GREATER_THAN term\n                  | expression LESS_THAN term\n                  | expression EQUAL_TO term\n                  | expression NOT_EQUAL_TO term\n                  | termterm : term TIMES factor\n            | term DIVIDE factor\n            | factorfactor : NUMBER\n              | LPAREN expression RPARENconditional : ILF LPAREN expression RPAREN LCURLY statements RCURLY\n                   | ILF LPAREN expression RPAREN LCURLY statements RCURLY ELZ LCURLY statements RCURLY\n                   | ILF LPAREN expression RPAREN LCURLY statements RCURLY ELIL LPAREN expression RPAREN LCURLY statements RCURLY ELZ LCURLY statements RCURLY'
    
_lr_action_items = {'ILF':([0,2,3,4,5,6,9,10,11,22,23,24,25,26,27,28,29,31,33,34,35,38,40,42,44,45,48,49,50,],[7,7,-3,-4,-5,-12,-15,-16,-2,-6,-7,-8,-9,-10,-11,-13,-14,-17,7,7,-18,7,7,-19,7,7,7,7,-20,]),'NUMBER':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,31,33,34,35,38,39,40,42,44,45,48,49,50,],[10,10,-3,-4,-5,-12,10,-15,-16,-2,10,10,10,10,10,10,10,10,10,-6,-7,-8,-9,-10,-11,-13,-14,-17,10,10,-18,10,10,10,-19,10,10,10,10,-20,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,31,33,34,35,37,38,39,40,42,44,45,48,49,50,],[8,8,-3,-4,-5,-12,20,8,-15,-16,-2,8,8,8,8,8,8,8,8,8,-6,-7,-8,-9,-10,-11,-13,-14,-17,8,8,-18,39,8,8,8,-19,8,8,8,8,-20,]),'$end':([1,2,3,4,5,6,9,10,11,22,23,24,25,26,27,28,29,31,35,42,50,],[0,-1,-3,-4,-5,-12,-15,-16,-2,-6,-7,-8,-9,-10,-11,-13,-14,-17,-18,-19,-20,]),'RCURLY':([3,4,5,6,9,10,11,22,23,24,25,26,27,28,29,31,34,35,40,42,45,49,50,],[-3,-4,-5,-12,-15,-16,-2,-6,-7,-8,-9,-10,-11,-13,-14,-17,35,-18,42,-19,46,50,-20,]),'PLUS':([4,6,9,10,21,22,23,24,25,26,27,28,29,30,31,41,],[12,-12,-15,-16,12,-6,-7,-8,-9,-10,-11,-13,-14,12,-17,12,]),'MINUS':([4,6,9,10,21,22,23,24,25,26,27,28,29,30,31,41,],[13,-12,-15,-16,13,-6,-7,-8,-9,-10,-11,-13,-14,13,-17,13,]),'GREATER_THAN':([4,6,9,10,21,22,23,24,25,26,27,28,29,30,31,41,],[14,-12,-15,-16,14,-6,-7,-8,-9,-10,-11,-13,-14,14,-17,14,]),'LESS_THAN':([4,6,9,10,21,22,23,24,25,26,27,28,29,30,31,41,],[15,-12,-15,-16,15,-6,-7,-8,-9,-10,-11,-13,-14,15,-17,15,]),'EQUAL_TO':([4,6,9,10,21,22,23,24,25,26,27,28,29,30,31,41,],[16,-12,-15,-16,16,-6,-7,-8,-9,-10,-11,-13,-14,16,-17,16,]),'NOT_EQUAL_TO':([4,6,9,10,21,22,23,24,25,26,27,28,29,30,31,41,],[17,-12,-15,-16,17,-6,-7,-8,-9,-10,-11,-13,-14,17,-17,17,]),'RPAREN':([6,9,10,21,22,23,24,25,26,27,28,29,30,31,41,],[-12,-15,-16,31,-6,-7,-8,-9,-10,-11,-13,-14,32,-17,43,]),'TIMES':([6,9,10,22,23,24,25,26,27,28,29,31,],[18,-15,-16,18,18,18,18,18,18,-13,-14,-17,]),'DIVIDE':([6,9,10,22,23,24,25,26,27,28,29,31,],[19,-15,-16,19,19,19,19,19,19,-13,-14,-17,]),'LCURLY':([32,36,43,47,],[33,38,44,48,]),'ELZ':([35,46,],[36,47,]),'ELIL':([35,],[37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statements':([0,33,38,44,48,],[2,34,40,45,49,]),'statement':([0,2,33,34,38,40,44,45,48,49,],[3,11,3,11,3,11,3,11,3,11,]),'expression':([0,2,8,20,33,34,38,39,40,44,45,48,49,],[4,4,21,30,4,4,4,41,4,4,4,4,4,]),'conditional':([0,2,33,34,38,40,44,45,48,49,],[5,5,5,5,5,5,5,5,5,5,]),'term':([0,2,8,12,13,14,15,16,17,20,33,34,38,39,40,44,45,48,49,],[6,6,6,22,23,24,25,26,27,6,6,6,6,6,6,6,6,6,6,]),'factor':([0,2,8,12,13,14,15,16,17,18,19,20,33,34,38,39,40,44,45,48,49,],[9,9,9,9,9,9,9,9,9,28,29,9,9,9,9,9,9,9,9,9,9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statements','start',1,'p_start','parser.py',14),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',19),
  ('statements -> statement','statements',1,'p_statements','parser.py',20),
  ('statement -> expression','statement',1,'p_statement','parser.py',28),
  ('statement -> conditional','statement',1,'p_statement','parser.py',29),
  ('expression -> expression PLUS term','expression',3,'p_expression','parser.py',34),
  ('expression -> expression MINUS term','expression',3,'p_expression','parser.py',35),
  ('expression -> expression GREATER_THAN term','expression',3,'p_expression','parser.py',36),
  ('expression -> expression LESS_THAN term','expression',3,'p_expression','parser.py',37),
  ('expression -> expression EQUAL_TO term','expression',3,'p_expression','parser.py',38),
  ('expression -> expression NOT_EQUAL_TO term','expression',3,'p_expression','parser.py',39),
  ('expression -> term','expression',1,'p_expression','parser.py',40),
  ('term -> term TIMES factor','term',3,'p_term','parser.py',48),
  ('term -> term DIVIDE factor','term',3,'p_term','parser.py',49),
  ('term -> factor','term',1,'p_term','parser.py',50),
  ('factor -> NUMBER','factor',1,'p_factor','parser.py',58),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor','parser.py',59),
  ('conditional -> ILF LPAREN expression RPAREN LCURLY statements RCURLY','conditional',7,'p_conditional','parser.py',67),
  ('conditional -> ILF LPAREN expression RPAREN LCURLY statements RCURLY ELZ LCURLY statements RCURLY','conditional',11,'p_conditional','parser.py',68),
  ('conditional -> ILF LPAREN expression RPAREN LCURLY statements RCURLY ELIL LPAREN expression RPAREN LCURLY statements RCURLY ELZ LCURLY statements RCURLY','conditional',18,'p_conditional','parser.py',69),
]
