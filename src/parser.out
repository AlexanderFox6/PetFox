Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN_OP
    BITWISE_OP
    COMMENT
    EOF
    EXPONENT
    LPAREN
    RPAREN
    SEPARATOR

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assignment_statement
Rule 2     statement -> if_statement
Rule 3     statement -> while_statement
Rule 4     statement -> expression_statement
Rule 5     statement -> BREAK
Rule 6     statement -> CONTINUE
Rule 7     statement -> ELIF
Rule 8     assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE
Rule 9     if_statement -> if_clause NEWLINE statement
Rule 10    if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
Rule 11    if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
Rule 12    if_clause -> KEYWORD expression
Rule 13    if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY
Rule 14    statement_list -> statement
Rule 15    statement_list -> statement_list statement
Rule 16    while_statement -> while_clause NEWLINE statement NEWLINE
Rule 17    while_clause -> KEYWORD expression
Rule 18    expression_statement -> expression NEWLINE
Rule 19    expression -> NUMBER
Rule 20    expression -> FLOAT
Rule 21    expression -> BOOLEAN
Rule 22    expression -> CHAR
Rule 23    expression -> IDENTIFIER
Rule 24    expression -> STRING
Rule 25    expression -> math_expression
Rule 26    expression -> comparison_expression
Rule 27    expression -> logical_expression
Rule 28    math_expression -> expression MATH_OP expression
Rule 29    comparison_expression -> expression COMPARISON_OP expression
Rule 30    logical_expression -> expression LOGICAL_OP expression

Terminals, with rules where they appear

ASSIGN               : 8
ASSIGN_OP            : 
BITWISE_OP           : 
BOOLEAN              : 21
BREAK                : 5
CHAR                 : 22
COMMENT              : 
COMPARISON_OP        : 29
CONTINUE             : 6
ELIF                 : 7 10 11
ELSE                 : 11
EOF                  : 
EXPONENT             : 
FLOAT                : 20
IDENTIFIER           : 8 23
KEYWORD              : 12 13 17
LCURLY               : 13
LOGICAL_OP           : 30
LPAREN               : 
MATH_OP              : 28
NEWLINE              : 8 9 10 10 10 11 11 11 11 11 13 16 16 18
NUMBER               : 19
RCURLY               : 13
RPAREN               : 
SEPARATOR            : 
STRING               : 24
error                : 

Nonterminals, with rules where they appear

assignment_statement : 1
comparison_expression : 26
expression           : 8 12 13 17 18 28 28 29 29 30 30
expression_statement : 4
if_clause            : 9 10 11
if_statement         : 2
logical_expression   : 27
math_expression      : 25
statement            : 9 10 10 11 11 11 14 15 16 0
statement_list       : 13 15
while_clause         : 16
while_statement      : 3

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (9) if_statement -> . if_clause NEWLINE statement
    (10) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (16) while_statement -> . while_clause NEWLINE statement NEWLINE
    (18) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> . KEYWORD expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    IDENTIFIER      shift and go to state 9
    KEYWORD         shift and go to state 13
    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    STRING          shift and go to state 18

    statement                      shift and go to state 1
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 10
    if_clause                      shift and go to state 11
    while_clause                   shift and go to state 12
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assignment_statement .

    $end            reduce using rule 1 (statement -> assignment_statement .)
    NEWLINE         reduce using rule 1 (statement -> assignment_statement .)
    RCURLY          reduce using rule 1 (statement -> assignment_statement .)
    BREAK           reduce using rule 1 (statement -> assignment_statement .)
    CONTINUE        reduce using rule 1 (statement -> assignment_statement .)
    ELIF            reduce using rule 1 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 1 (statement -> assignment_statement .)
    KEYWORD         reduce using rule 1 (statement -> assignment_statement .)
    NUMBER          reduce using rule 1 (statement -> assignment_statement .)
    FLOAT           reduce using rule 1 (statement -> assignment_statement .)
    BOOLEAN         reduce using rule 1 (statement -> assignment_statement .)
    CHAR            reduce using rule 1 (statement -> assignment_statement .)
    STRING          reduce using rule 1 (statement -> assignment_statement .)


state 3

    (2) statement -> if_statement .

    $end            reduce using rule 2 (statement -> if_statement .)
    NEWLINE         reduce using rule 2 (statement -> if_statement .)
    RCURLY          reduce using rule 2 (statement -> if_statement .)
    BREAK           reduce using rule 2 (statement -> if_statement .)
    CONTINUE        reduce using rule 2 (statement -> if_statement .)
    ELIF            reduce using rule 2 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 2 (statement -> if_statement .)
    KEYWORD         reduce using rule 2 (statement -> if_statement .)
    NUMBER          reduce using rule 2 (statement -> if_statement .)
    FLOAT           reduce using rule 2 (statement -> if_statement .)
    BOOLEAN         reduce using rule 2 (statement -> if_statement .)
    CHAR            reduce using rule 2 (statement -> if_statement .)
    STRING          reduce using rule 2 (statement -> if_statement .)


state 4

    (3) statement -> while_statement .

    $end            reduce using rule 3 (statement -> while_statement .)
    NEWLINE         reduce using rule 3 (statement -> while_statement .)
    RCURLY          reduce using rule 3 (statement -> while_statement .)
    BREAK           reduce using rule 3 (statement -> while_statement .)
    CONTINUE        reduce using rule 3 (statement -> while_statement .)
    ELIF            reduce using rule 3 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 3 (statement -> while_statement .)
    KEYWORD         reduce using rule 3 (statement -> while_statement .)
    NUMBER          reduce using rule 3 (statement -> while_statement .)
    FLOAT           reduce using rule 3 (statement -> while_statement .)
    BOOLEAN         reduce using rule 3 (statement -> while_statement .)
    CHAR            reduce using rule 3 (statement -> while_statement .)
    STRING          reduce using rule 3 (statement -> while_statement .)


state 5

    (4) statement -> expression_statement .

    $end            reduce using rule 4 (statement -> expression_statement .)
    NEWLINE         reduce using rule 4 (statement -> expression_statement .)
    RCURLY          reduce using rule 4 (statement -> expression_statement .)
    BREAK           reduce using rule 4 (statement -> expression_statement .)
    CONTINUE        reduce using rule 4 (statement -> expression_statement .)
    ELIF            reduce using rule 4 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> expression_statement .)
    KEYWORD         reduce using rule 4 (statement -> expression_statement .)
    NUMBER          reduce using rule 4 (statement -> expression_statement .)
    FLOAT           reduce using rule 4 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 4 (statement -> expression_statement .)
    CHAR            reduce using rule 4 (statement -> expression_statement .)
    STRING          reduce using rule 4 (statement -> expression_statement .)


state 6

    (5) statement -> BREAK .

    $end            reduce using rule 5 (statement -> BREAK .)
    NEWLINE         reduce using rule 5 (statement -> BREAK .)
    RCURLY          reduce using rule 5 (statement -> BREAK .)
    BREAK           reduce using rule 5 (statement -> BREAK .)
    CONTINUE        reduce using rule 5 (statement -> BREAK .)
    ELIF            reduce using rule 5 (statement -> BREAK .)
    IDENTIFIER      reduce using rule 5 (statement -> BREAK .)
    KEYWORD         reduce using rule 5 (statement -> BREAK .)
    NUMBER          reduce using rule 5 (statement -> BREAK .)
    FLOAT           reduce using rule 5 (statement -> BREAK .)
    BOOLEAN         reduce using rule 5 (statement -> BREAK .)
    CHAR            reduce using rule 5 (statement -> BREAK .)
    STRING          reduce using rule 5 (statement -> BREAK .)


state 7

    (6) statement -> CONTINUE .

    $end            reduce using rule 6 (statement -> CONTINUE .)
    NEWLINE         reduce using rule 6 (statement -> CONTINUE .)
    RCURLY          reduce using rule 6 (statement -> CONTINUE .)
    BREAK           reduce using rule 6 (statement -> CONTINUE .)
    CONTINUE        reduce using rule 6 (statement -> CONTINUE .)
    ELIF            reduce using rule 6 (statement -> CONTINUE .)
    IDENTIFIER      reduce using rule 6 (statement -> CONTINUE .)
    KEYWORD         reduce using rule 6 (statement -> CONTINUE .)
    NUMBER          reduce using rule 6 (statement -> CONTINUE .)
    FLOAT           reduce using rule 6 (statement -> CONTINUE .)
    BOOLEAN         reduce using rule 6 (statement -> CONTINUE .)
    CHAR            reduce using rule 6 (statement -> CONTINUE .)
    STRING          reduce using rule 6 (statement -> CONTINUE .)


state 8

    (7) statement -> ELIF .

    $end            reduce using rule 7 (statement -> ELIF .)
    NEWLINE         reduce using rule 7 (statement -> ELIF .)
    RCURLY          reduce using rule 7 (statement -> ELIF .)
    BREAK           reduce using rule 7 (statement -> ELIF .)
    CONTINUE        reduce using rule 7 (statement -> ELIF .)
    ELIF            reduce using rule 7 (statement -> ELIF .)
    IDENTIFIER      reduce using rule 7 (statement -> ELIF .)
    KEYWORD         reduce using rule 7 (statement -> ELIF .)
    NUMBER          reduce using rule 7 (statement -> ELIF .)
    FLOAT           reduce using rule 7 (statement -> ELIF .)
    BOOLEAN         reduce using rule 7 (statement -> ELIF .)
    CHAR            reduce using rule 7 (statement -> ELIF .)
    STRING          reduce using rule 7 (statement -> ELIF .)


state 9

    (8) assignment_statement -> IDENTIFIER . ASSIGN expression NEWLINE
    (23) expression -> IDENTIFIER .

    ASSIGN          shift and go to state 22
    NEWLINE         reduce using rule 23 (expression -> IDENTIFIER .)
    MATH_OP         reduce using rule 23 (expression -> IDENTIFIER .)
    COMPARISON_OP   reduce using rule 23 (expression -> IDENTIFIER .)
    LOGICAL_OP      reduce using rule 23 (expression -> IDENTIFIER .)


state 10

    (18) expression_statement -> expression . NEWLINE
    (28) math_expression -> expression . MATH_OP expression
    (29) comparison_expression -> expression . COMPARISON_OP expression
    (30) logical_expression -> expression . LOGICAL_OP expression

    NEWLINE         shift and go to state 23
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26


state 11

    (9) if_statement -> if_clause . NEWLINE statement
    (10) if_statement -> if_clause . NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> if_clause . NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement

    NEWLINE         shift and go to state 27


state 12

    (16) while_statement -> while_clause . NEWLINE statement NEWLINE

    NEWLINE         shift and go to state 28


state 13

    (12) if_clause -> KEYWORD . expression
    (13) if_clause -> KEYWORD . expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> KEYWORD . expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 18

    expression                     shift and go to state 29
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 14

    (19) expression -> NUMBER .

    NEWLINE         reduce using rule 19 (expression -> NUMBER .)
    MATH_OP         reduce using rule 19 (expression -> NUMBER .)
    COMPARISON_OP   reduce using rule 19 (expression -> NUMBER .)
    LOGICAL_OP      reduce using rule 19 (expression -> NUMBER .)
    LCURLY          reduce using rule 19 (expression -> NUMBER .)


state 15

    (20) expression -> FLOAT .

    NEWLINE         reduce using rule 20 (expression -> FLOAT .)
    MATH_OP         reduce using rule 20 (expression -> FLOAT .)
    COMPARISON_OP   reduce using rule 20 (expression -> FLOAT .)
    LOGICAL_OP      reduce using rule 20 (expression -> FLOAT .)
    LCURLY          reduce using rule 20 (expression -> FLOAT .)


state 16

    (21) expression -> BOOLEAN .

    NEWLINE         reduce using rule 21 (expression -> BOOLEAN .)
    MATH_OP         reduce using rule 21 (expression -> BOOLEAN .)
    COMPARISON_OP   reduce using rule 21 (expression -> BOOLEAN .)
    LOGICAL_OP      reduce using rule 21 (expression -> BOOLEAN .)
    LCURLY          reduce using rule 21 (expression -> BOOLEAN .)


state 17

    (22) expression -> CHAR .

    NEWLINE         reduce using rule 22 (expression -> CHAR .)
    MATH_OP         reduce using rule 22 (expression -> CHAR .)
    COMPARISON_OP   reduce using rule 22 (expression -> CHAR .)
    LOGICAL_OP      reduce using rule 22 (expression -> CHAR .)
    LCURLY          reduce using rule 22 (expression -> CHAR .)


state 18

    (24) expression -> STRING .

    NEWLINE         reduce using rule 24 (expression -> STRING .)
    MATH_OP         reduce using rule 24 (expression -> STRING .)
    COMPARISON_OP   reduce using rule 24 (expression -> STRING .)
    LOGICAL_OP      reduce using rule 24 (expression -> STRING .)
    LCURLY          reduce using rule 24 (expression -> STRING .)


state 19

    (25) expression -> math_expression .

    NEWLINE         reduce using rule 25 (expression -> math_expression .)
    MATH_OP         reduce using rule 25 (expression -> math_expression .)
    COMPARISON_OP   reduce using rule 25 (expression -> math_expression .)
    LOGICAL_OP      reduce using rule 25 (expression -> math_expression .)
    LCURLY          reduce using rule 25 (expression -> math_expression .)


state 20

    (26) expression -> comparison_expression .

    NEWLINE         reduce using rule 26 (expression -> comparison_expression .)
    MATH_OP         reduce using rule 26 (expression -> comparison_expression .)
    COMPARISON_OP   reduce using rule 26 (expression -> comparison_expression .)
    LOGICAL_OP      reduce using rule 26 (expression -> comparison_expression .)
    LCURLY          reduce using rule 26 (expression -> comparison_expression .)


state 21

    (27) expression -> logical_expression .

    NEWLINE         reduce using rule 27 (expression -> logical_expression .)
    MATH_OP         reduce using rule 27 (expression -> logical_expression .)
    COMPARISON_OP   reduce using rule 27 (expression -> logical_expression .)
    LOGICAL_OP      reduce using rule 27 (expression -> logical_expression .)
    LCURLY          reduce using rule 27 (expression -> logical_expression .)


state 22

    (8) assignment_statement -> IDENTIFIER ASSIGN . expression NEWLINE
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 18

    expression                     shift and go to state 31
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 23

    (18) expression_statement -> expression NEWLINE .

    $end            reduce using rule 18 (expression_statement -> expression NEWLINE .)
    NEWLINE         reduce using rule 18 (expression_statement -> expression NEWLINE .)
    RCURLY          reduce using rule 18 (expression_statement -> expression NEWLINE .)
    BREAK           reduce using rule 18 (expression_statement -> expression NEWLINE .)
    CONTINUE        reduce using rule 18 (expression_statement -> expression NEWLINE .)
    ELIF            reduce using rule 18 (expression_statement -> expression NEWLINE .)
    IDENTIFIER      reduce using rule 18 (expression_statement -> expression NEWLINE .)
    KEYWORD         reduce using rule 18 (expression_statement -> expression NEWLINE .)
    NUMBER          reduce using rule 18 (expression_statement -> expression NEWLINE .)
    FLOAT           reduce using rule 18 (expression_statement -> expression NEWLINE .)
    BOOLEAN         reduce using rule 18 (expression_statement -> expression NEWLINE .)
    CHAR            reduce using rule 18 (expression_statement -> expression NEWLINE .)
    STRING          reduce using rule 18 (expression_statement -> expression NEWLINE .)


state 24

    (28) math_expression -> expression MATH_OP . expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 18

    expression                     shift and go to state 32
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 25

    (29) comparison_expression -> expression COMPARISON_OP . expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 18

    expression                     shift and go to state 33
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 26

    (30) logical_expression -> expression LOGICAL_OP . expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 18

    expression                     shift and go to state 34
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 27

    (9) if_statement -> if_clause NEWLINE . statement
    (10) if_statement -> if_clause NEWLINE . statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> if_clause NEWLINE . statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (9) if_statement -> . if_clause NEWLINE statement
    (10) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (16) while_statement -> . while_clause NEWLINE statement NEWLINE
    (18) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> . KEYWORD expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    IDENTIFIER      shift and go to state 9
    KEYWORD         shift and go to state 13
    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    STRING          shift and go to state 18

    if_clause                      shift and go to state 11
    statement                      shift and go to state 35
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 10
    while_clause                   shift and go to state 12
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 28

    (16) while_statement -> while_clause NEWLINE . statement NEWLINE
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (9) if_statement -> . if_clause NEWLINE statement
    (10) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (16) while_statement -> . while_clause NEWLINE statement NEWLINE
    (18) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> . KEYWORD expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    IDENTIFIER      shift and go to state 9
    KEYWORD         shift and go to state 13
    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    STRING          shift and go to state 18

    while_clause                   shift and go to state 12
    statement                      shift and go to state 36
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 10
    if_clause                      shift and go to state 11
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 29

    (12) if_clause -> KEYWORD expression .
    (13) if_clause -> KEYWORD expression . LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> KEYWORD expression .
    (28) math_expression -> expression . MATH_OP expression
    (29) comparison_expression -> expression . COMPARISON_OP expression
    (30) logical_expression -> expression . LOGICAL_OP expression

  ! reduce/reduce conflict for NEWLINE resolved using rule 12 (if_clause -> KEYWORD expression .)
    NEWLINE         reduce using rule 12 (if_clause -> KEYWORD expression .)
    LCURLY          shift and go to state 37
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26

  ! NEWLINE         [ reduce using rule 17 (while_clause -> KEYWORD expression .) ]


state 30

    (23) expression -> IDENTIFIER .

    LCURLY          reduce using rule 23 (expression -> IDENTIFIER .)
    MATH_OP         reduce using rule 23 (expression -> IDENTIFIER .)
    COMPARISON_OP   reduce using rule 23 (expression -> IDENTIFIER .)
    LOGICAL_OP      reduce using rule 23 (expression -> IDENTIFIER .)
    NEWLINE         reduce using rule 23 (expression -> IDENTIFIER .)


state 31

    (8) assignment_statement -> IDENTIFIER ASSIGN expression . NEWLINE
    (28) math_expression -> expression . MATH_OP expression
    (29) comparison_expression -> expression . COMPARISON_OP expression
    (30) logical_expression -> expression . LOGICAL_OP expression

    NEWLINE         shift and go to state 38
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26


state 32

    (28) math_expression -> expression MATH_OP expression .
    (28) math_expression -> expression . MATH_OP expression
    (29) comparison_expression -> expression . COMPARISON_OP expression
    (30) logical_expression -> expression . LOGICAL_OP expression

  ! shift/reduce conflict for MATH_OP resolved as shift
  ! shift/reduce conflict for COMPARISON_OP resolved as shift
  ! shift/reduce conflict for LOGICAL_OP resolved as shift
    NEWLINE         reduce using rule 28 (math_expression -> expression MATH_OP expression .)
    LCURLY          reduce using rule 28 (math_expression -> expression MATH_OP expression .)
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26

  ! MATH_OP         [ reduce using rule 28 (math_expression -> expression MATH_OP expression .) ]
  ! COMPARISON_OP   [ reduce using rule 28 (math_expression -> expression MATH_OP expression .) ]
  ! LOGICAL_OP      [ reduce using rule 28 (math_expression -> expression MATH_OP expression .) ]


state 33

    (29) comparison_expression -> expression COMPARISON_OP expression .
    (28) math_expression -> expression . MATH_OP expression
    (29) comparison_expression -> expression . COMPARISON_OP expression
    (30) logical_expression -> expression . LOGICAL_OP expression

  ! shift/reduce conflict for MATH_OP resolved as shift
  ! shift/reduce conflict for COMPARISON_OP resolved as shift
  ! shift/reduce conflict for LOGICAL_OP resolved as shift
    NEWLINE         reduce using rule 29 (comparison_expression -> expression COMPARISON_OP expression .)
    LCURLY          reduce using rule 29 (comparison_expression -> expression COMPARISON_OP expression .)
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26

  ! MATH_OP         [ reduce using rule 29 (comparison_expression -> expression COMPARISON_OP expression .) ]
  ! COMPARISON_OP   [ reduce using rule 29 (comparison_expression -> expression COMPARISON_OP expression .) ]
  ! LOGICAL_OP      [ reduce using rule 29 (comparison_expression -> expression COMPARISON_OP expression .) ]


state 34

    (30) logical_expression -> expression LOGICAL_OP expression .
    (28) math_expression -> expression . MATH_OP expression
    (29) comparison_expression -> expression . COMPARISON_OP expression
    (30) logical_expression -> expression . LOGICAL_OP expression

  ! shift/reduce conflict for MATH_OP resolved as shift
  ! shift/reduce conflict for COMPARISON_OP resolved as shift
  ! shift/reduce conflict for LOGICAL_OP resolved as shift
    NEWLINE         reduce using rule 30 (logical_expression -> expression LOGICAL_OP expression .)
    LCURLY          reduce using rule 30 (logical_expression -> expression LOGICAL_OP expression .)
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26

  ! MATH_OP         [ reduce using rule 30 (logical_expression -> expression LOGICAL_OP expression .) ]
  ! COMPARISON_OP   [ reduce using rule 30 (logical_expression -> expression LOGICAL_OP expression .) ]
  ! LOGICAL_OP      [ reduce using rule 30 (logical_expression -> expression LOGICAL_OP expression .) ]


state 35

    (9) if_statement -> if_clause NEWLINE statement .
    (10) if_statement -> if_clause NEWLINE statement . NEWLINE ELIF NEWLINE statement
    (11) if_statement -> if_clause NEWLINE statement . NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    RCURLY          reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    BREAK           reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    CONTINUE        reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    ELIF            reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    IDENTIFIER      reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    KEYWORD         reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    NUMBER          reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    FLOAT           reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    BOOLEAN         reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    CHAR            reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    STRING          reduce using rule 9 (if_statement -> if_clause NEWLINE statement .)
    NEWLINE         shift and go to state 39

  ! NEWLINE         [ reduce using rule 9 (if_statement -> if_clause NEWLINE statement .) ]


state 36

    (16) while_statement -> while_clause NEWLINE statement . NEWLINE

    NEWLINE         shift and go to state 40


state 37

    (13) if_clause -> KEYWORD expression LCURLY . NEWLINE statement_list RCURLY

    NEWLINE         shift and go to state 41


state 38

    (8) assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .

    $end            reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    NEWLINE         reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    RCURLY          reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    BREAK           reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    CONTINUE        reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    ELIF            reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    IDENTIFIER      reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    KEYWORD         reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    NUMBER          reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    FLOAT           reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    BOOLEAN         reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    CHAR            reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    STRING          reduce using rule 8 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)


state 39

    (10) if_statement -> if_clause NEWLINE statement NEWLINE . ELIF NEWLINE statement
    (11) if_statement -> if_clause NEWLINE statement NEWLINE . ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement

    ELIF            shift and go to state 42


state 40

    (16) while_statement -> while_clause NEWLINE statement NEWLINE .

    $end            reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    NEWLINE         reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    RCURLY          reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    BREAK           reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    CONTINUE        reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    ELIF            reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    IDENTIFIER      reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    KEYWORD         reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    NUMBER          reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    FLOAT           reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    BOOLEAN         reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    CHAR            reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    STRING          reduce using rule 16 (while_statement -> while_clause NEWLINE statement NEWLINE .)


state 41

    (13) if_clause -> KEYWORD expression LCURLY NEWLINE . statement_list RCURLY
    (14) statement_list -> . statement
    (15) statement_list -> . statement_list statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (9) if_statement -> . if_clause NEWLINE statement
    (10) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (16) while_statement -> . while_clause NEWLINE statement NEWLINE
    (18) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> . KEYWORD expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    IDENTIFIER      shift and go to state 9
    KEYWORD         shift and go to state 13
    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    STRING          shift and go to state 18

    expression                     shift and go to state 10
    statement_list                 shift and go to state 43
    statement                      shift and go to state 44
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    if_clause                      shift and go to state 11
    while_clause                   shift and go to state 12
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 42

    (10) if_statement -> if_clause NEWLINE statement NEWLINE ELIF . NEWLINE statement
    (11) if_statement -> if_clause NEWLINE statement NEWLINE ELIF . NEWLINE statement NEWLINE ELSE NEWLINE statement

    NEWLINE         shift and go to state 45


state 43

    (13) if_clause -> KEYWORD expression LCURLY NEWLINE statement_list . RCURLY
    (15) statement_list -> statement_list . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (9) if_statement -> . if_clause NEWLINE statement
    (10) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (16) while_statement -> . while_clause NEWLINE statement NEWLINE
    (18) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> . KEYWORD expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    RCURLY          shift and go to state 46
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    IDENTIFIER      shift and go to state 9
    KEYWORD         shift and go to state 13
    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    STRING          shift and go to state 18

    expression                     shift and go to state 10
    statement                      shift and go to state 47
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    if_clause                      shift and go to state 11
    while_clause                   shift and go to state 12
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 44

    (14) statement_list -> statement .

    RCURLY          reduce using rule 14 (statement_list -> statement .)
    BREAK           reduce using rule 14 (statement_list -> statement .)
    CONTINUE        reduce using rule 14 (statement_list -> statement .)
    ELIF            reduce using rule 14 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 14 (statement_list -> statement .)
    KEYWORD         reduce using rule 14 (statement_list -> statement .)
    NUMBER          reduce using rule 14 (statement_list -> statement .)
    FLOAT           reduce using rule 14 (statement_list -> statement .)
    BOOLEAN         reduce using rule 14 (statement_list -> statement .)
    CHAR            reduce using rule 14 (statement_list -> statement .)
    STRING          reduce using rule 14 (statement_list -> statement .)


state 45

    (10) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE . statement
    (11) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE . statement NEWLINE ELSE NEWLINE statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (9) if_statement -> . if_clause NEWLINE statement
    (10) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (16) while_statement -> . while_clause NEWLINE statement NEWLINE
    (18) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> . KEYWORD expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    IDENTIFIER      shift and go to state 9
    KEYWORD         shift and go to state 13
    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    STRING          shift and go to state 18

    if_clause                      shift and go to state 11
    statement                      shift and go to state 48
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 10
    while_clause                   shift and go to state 12
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 46

    (13) if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY .

    NEWLINE         reduce using rule 13 (if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY .)


state 47

    (15) statement_list -> statement_list statement .

    RCURLY          reduce using rule 15 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 15 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 15 (statement_list -> statement_list statement .)
    ELIF            reduce using rule 15 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 15 (statement_list -> statement_list statement .)
    KEYWORD         reduce using rule 15 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 15 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 15 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 15 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 15 (statement_list -> statement_list statement .)
    STRING          reduce using rule 15 (statement_list -> statement_list statement .)


state 48

    (10) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .
    (11) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement . NEWLINE ELSE NEWLINE statement

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    RCURLY          reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    BREAK           reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    CONTINUE        reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    ELIF            reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    IDENTIFIER      reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    KEYWORD         reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    NUMBER          reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    FLOAT           reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    BOOLEAN         reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    CHAR            reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    STRING          reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .)
    NEWLINE         shift and go to state 49

  ! NEWLINE         [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement .) ]


state 49

    (11) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE . ELSE NEWLINE statement

    ELSE            shift and go to state 50


state 50

    (11) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE . NEWLINE statement

    NEWLINE         shift and go to state 51


state 51

    (11) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (9) if_statement -> . if_clause NEWLINE statement
    (10) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement
    (11) if_statement -> . if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement
    (16) while_statement -> . while_clause NEWLINE statement NEWLINE
    (18) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (17) while_clause -> . KEYWORD expression
    (19) expression -> . NUMBER
    (20) expression -> . FLOAT
    (21) expression -> . BOOLEAN
    (22) expression -> . CHAR
    (23) expression -> . IDENTIFIER
    (24) expression -> . STRING
    (25) expression -> . math_expression
    (26) expression -> . comparison_expression
    (27) expression -> . logical_expression
    (28) math_expression -> . expression MATH_OP expression
    (29) comparison_expression -> . expression COMPARISON_OP expression
    (30) logical_expression -> . expression LOGICAL_OP expression

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    IDENTIFIER      shift and go to state 9
    KEYWORD         shift and go to state 13
    NUMBER          shift and go to state 14
    FLOAT           shift and go to state 15
    BOOLEAN         shift and go to state 16
    CHAR            shift and go to state 17
    STRING          shift and go to state 18

    if_clause                      shift and go to state 11
    statement                      shift and go to state 52
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 10
    while_clause                   shift and go to state 12
    math_expression                shift and go to state 19
    comparison_expression          shift and go to state 20
    logical_expression             shift and go to state 21

state 52

    (11) if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .

    $end            reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    NEWLINE         reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    RCURLY          reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    BREAK           reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    CONTINUE        reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    ELIF            reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    IDENTIFIER      reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    KEYWORD         reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    NUMBER          reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    FLOAT           reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    BOOLEAN         reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    CHAR            reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)
    STRING          reduce using rule 11 (if_statement -> if_clause NEWLINE statement NEWLINE ELIF NEWLINE statement NEWLINE ELSE NEWLINE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MATH_OP in state 32 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OP in state 32 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OP in state 32 resolved as shift
WARNING: shift/reduce conflict for MATH_OP in state 33 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OP in state 33 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OP in state 33 resolved as shift
WARNING: shift/reduce conflict for MATH_OP in state 34 resolved as shift
WARNING: shift/reduce conflict for COMPARISON_OP in state 34 resolved as shift
WARNING: shift/reduce conflict for LOGICAL_OP in state 34 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 35 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 48 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (if_clause -> KEYWORD expression)
WARNING: rejected rule (while_clause -> KEYWORD expression) in state 29
WARNING: Rule (while_clause -> KEYWORD expression) is never reduced
