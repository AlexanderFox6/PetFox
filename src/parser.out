Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN_OP
    BITWISE_OP
    COMMENT
    EOF
    EXPONENT
    SEPARATOR

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assignment_statement
Rule 2     statement -> if_statement
Rule 3     statement -> while_statement
Rule 4     statement -> expression_statement
Rule 5     statement -> BREAK
Rule 6     statement -> CONTINUE
Rule 7     statement -> ELIF
Rule 8     statement -> ELSE
Rule 9     assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE
Rule 10    if_statement -> if_clause NEWLINE statement_list
Rule 11    if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list
Rule 12    if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
Rule 13    if_clause -> KEYWORD expression
Rule 14    if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY
Rule 15    statement_list -> statement
Rule 16    statement_list -> statement_list statement
Rule 17    while_statement -> while_clause NEWLINE statement NEWLINE
Rule 18    while_clause -> KEYWORD expression
Rule 19    expression_statement -> expression NEWLINE
Rule 20    expression -> LPAREN expression RPAREN
Rule 21    expression -> expression MATH_OP expression
Rule 22    expression -> expression COMPARISON_OP expression
Rule 23    expression -> expression LOGICAL_OP expression
Rule 24    expression -> literal
Rule 25    literal -> NUMBER
Rule 26    literal -> FLOAT
Rule 27    literal -> BOOLEAN
Rule 28    literal -> CHAR
Rule 29    literal -> IDENTIFIER
Rule 30    literal -> STRING

Terminals, with rules where they appear

ASSIGN               : 9
ASSIGN_OP            : 
BITWISE_OP           : 
BOOLEAN              : 27
BREAK                : 5
CHAR                 : 28
COMMENT              : 
COMPARISON_OP        : 22
CONTINUE             : 6
ELIF                 : 7 11 12
ELSE                 : 8 12
EOF                  : 
EXPONENT             : 
FLOAT                : 26
IDENTIFIER           : 9 29
KEYWORD              : 13 14 18
LCURLY               : 14
LOGICAL_OP           : 23
LPAREN               : 20
MATH_OP              : 21
NEWLINE              : 9 10 11 11 12 12 12 12 14 17 17 19
NUMBER               : 25
RCURLY               : 14
RPAREN               : 20
SEPARATOR            : 
STRING               : 30
error                : 

Nonterminals, with rules where they appear

assignment_statement : 1
expression           : 9 13 14 18 19 20 21 21 22 22 23 23
expression_statement : 4
if_clause            : 10 11 12
if_statement         : 2
literal              : 24
statement            : 15 16 17 0
statement_list       : 10 11 11 12 12 12 14 16
while_clause         : 17
while_statement      : 3

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    statement                      shift and go to state 1
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    if_clause                      shift and go to state 12
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assignment_statement .

    $end            reduce using rule 1 (statement -> assignment_statement .)
    ELIF            reduce using rule 1 (statement -> assignment_statement .)
    BREAK           reduce using rule 1 (statement -> assignment_statement .)
    CONTINUE        reduce using rule 1 (statement -> assignment_statement .)
    ELSE            reduce using rule 1 (statement -> assignment_statement .)
    IDENTIFIER      reduce using rule 1 (statement -> assignment_statement .)
    KEYWORD         reduce using rule 1 (statement -> assignment_statement .)
    LPAREN          reduce using rule 1 (statement -> assignment_statement .)
    NUMBER          reduce using rule 1 (statement -> assignment_statement .)
    FLOAT           reduce using rule 1 (statement -> assignment_statement .)
    BOOLEAN         reduce using rule 1 (statement -> assignment_statement .)
    CHAR            reduce using rule 1 (statement -> assignment_statement .)
    STRING          reduce using rule 1 (statement -> assignment_statement .)
    NEWLINE         reduce using rule 1 (statement -> assignment_statement .)
    RCURLY          reduce using rule 1 (statement -> assignment_statement .)


state 3

    (2) statement -> if_statement .

    $end            reduce using rule 2 (statement -> if_statement .)
    ELIF            reduce using rule 2 (statement -> if_statement .)
    BREAK           reduce using rule 2 (statement -> if_statement .)
    CONTINUE        reduce using rule 2 (statement -> if_statement .)
    ELSE            reduce using rule 2 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 2 (statement -> if_statement .)
    KEYWORD         reduce using rule 2 (statement -> if_statement .)
    LPAREN          reduce using rule 2 (statement -> if_statement .)
    NUMBER          reduce using rule 2 (statement -> if_statement .)
    FLOAT           reduce using rule 2 (statement -> if_statement .)
    BOOLEAN         reduce using rule 2 (statement -> if_statement .)
    CHAR            reduce using rule 2 (statement -> if_statement .)
    STRING          reduce using rule 2 (statement -> if_statement .)
    NEWLINE         reduce using rule 2 (statement -> if_statement .)
    RCURLY          reduce using rule 2 (statement -> if_statement .)


state 4

    (3) statement -> while_statement .

    $end            reduce using rule 3 (statement -> while_statement .)
    ELIF            reduce using rule 3 (statement -> while_statement .)
    BREAK           reduce using rule 3 (statement -> while_statement .)
    CONTINUE        reduce using rule 3 (statement -> while_statement .)
    ELSE            reduce using rule 3 (statement -> while_statement .)
    IDENTIFIER      reduce using rule 3 (statement -> while_statement .)
    KEYWORD         reduce using rule 3 (statement -> while_statement .)
    LPAREN          reduce using rule 3 (statement -> while_statement .)
    NUMBER          reduce using rule 3 (statement -> while_statement .)
    FLOAT           reduce using rule 3 (statement -> while_statement .)
    BOOLEAN         reduce using rule 3 (statement -> while_statement .)
    CHAR            reduce using rule 3 (statement -> while_statement .)
    STRING          reduce using rule 3 (statement -> while_statement .)
    NEWLINE         reduce using rule 3 (statement -> while_statement .)
    RCURLY          reduce using rule 3 (statement -> while_statement .)


state 5

    (4) statement -> expression_statement .

    $end            reduce using rule 4 (statement -> expression_statement .)
    ELIF            reduce using rule 4 (statement -> expression_statement .)
    BREAK           reduce using rule 4 (statement -> expression_statement .)
    CONTINUE        reduce using rule 4 (statement -> expression_statement .)
    ELSE            reduce using rule 4 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 4 (statement -> expression_statement .)
    KEYWORD         reduce using rule 4 (statement -> expression_statement .)
    LPAREN          reduce using rule 4 (statement -> expression_statement .)
    NUMBER          reduce using rule 4 (statement -> expression_statement .)
    FLOAT           reduce using rule 4 (statement -> expression_statement .)
    BOOLEAN         reduce using rule 4 (statement -> expression_statement .)
    CHAR            reduce using rule 4 (statement -> expression_statement .)
    STRING          reduce using rule 4 (statement -> expression_statement .)
    NEWLINE         reduce using rule 4 (statement -> expression_statement .)
    RCURLY          reduce using rule 4 (statement -> expression_statement .)


state 6

    (5) statement -> BREAK .

    $end            reduce using rule 5 (statement -> BREAK .)
    ELIF            reduce using rule 5 (statement -> BREAK .)
    BREAK           reduce using rule 5 (statement -> BREAK .)
    CONTINUE        reduce using rule 5 (statement -> BREAK .)
    ELSE            reduce using rule 5 (statement -> BREAK .)
    IDENTIFIER      reduce using rule 5 (statement -> BREAK .)
    KEYWORD         reduce using rule 5 (statement -> BREAK .)
    LPAREN          reduce using rule 5 (statement -> BREAK .)
    NUMBER          reduce using rule 5 (statement -> BREAK .)
    FLOAT           reduce using rule 5 (statement -> BREAK .)
    BOOLEAN         reduce using rule 5 (statement -> BREAK .)
    CHAR            reduce using rule 5 (statement -> BREAK .)
    STRING          reduce using rule 5 (statement -> BREAK .)
    NEWLINE         reduce using rule 5 (statement -> BREAK .)
    RCURLY          reduce using rule 5 (statement -> BREAK .)


state 7

    (6) statement -> CONTINUE .

    $end            reduce using rule 6 (statement -> CONTINUE .)
    ELIF            reduce using rule 6 (statement -> CONTINUE .)
    BREAK           reduce using rule 6 (statement -> CONTINUE .)
    CONTINUE        reduce using rule 6 (statement -> CONTINUE .)
    ELSE            reduce using rule 6 (statement -> CONTINUE .)
    IDENTIFIER      reduce using rule 6 (statement -> CONTINUE .)
    KEYWORD         reduce using rule 6 (statement -> CONTINUE .)
    LPAREN          reduce using rule 6 (statement -> CONTINUE .)
    NUMBER          reduce using rule 6 (statement -> CONTINUE .)
    FLOAT           reduce using rule 6 (statement -> CONTINUE .)
    BOOLEAN         reduce using rule 6 (statement -> CONTINUE .)
    CHAR            reduce using rule 6 (statement -> CONTINUE .)
    STRING          reduce using rule 6 (statement -> CONTINUE .)
    NEWLINE         reduce using rule 6 (statement -> CONTINUE .)
    RCURLY          reduce using rule 6 (statement -> CONTINUE .)


state 8

    (7) statement -> ELIF .

    $end            reduce using rule 7 (statement -> ELIF .)
    ELIF            reduce using rule 7 (statement -> ELIF .)
    BREAK           reduce using rule 7 (statement -> ELIF .)
    CONTINUE        reduce using rule 7 (statement -> ELIF .)
    ELSE            reduce using rule 7 (statement -> ELIF .)
    IDENTIFIER      reduce using rule 7 (statement -> ELIF .)
    KEYWORD         reduce using rule 7 (statement -> ELIF .)
    LPAREN          reduce using rule 7 (statement -> ELIF .)
    NUMBER          reduce using rule 7 (statement -> ELIF .)
    FLOAT           reduce using rule 7 (statement -> ELIF .)
    BOOLEAN         reduce using rule 7 (statement -> ELIF .)
    CHAR            reduce using rule 7 (statement -> ELIF .)
    STRING          reduce using rule 7 (statement -> ELIF .)
    NEWLINE         reduce using rule 7 (statement -> ELIF .)
    RCURLY          reduce using rule 7 (statement -> ELIF .)


state 9

    (8) statement -> ELSE .

    $end            reduce using rule 8 (statement -> ELSE .)
    ELIF            reduce using rule 8 (statement -> ELSE .)
    BREAK           reduce using rule 8 (statement -> ELSE .)
    CONTINUE        reduce using rule 8 (statement -> ELSE .)
    ELSE            reduce using rule 8 (statement -> ELSE .)
    IDENTIFIER      reduce using rule 8 (statement -> ELSE .)
    KEYWORD         reduce using rule 8 (statement -> ELSE .)
    LPAREN          reduce using rule 8 (statement -> ELSE .)
    NUMBER          reduce using rule 8 (statement -> ELSE .)
    FLOAT           reduce using rule 8 (statement -> ELSE .)
    BOOLEAN         reduce using rule 8 (statement -> ELSE .)
    CHAR            reduce using rule 8 (statement -> ELSE .)
    STRING          reduce using rule 8 (statement -> ELSE .)
    NEWLINE         reduce using rule 8 (statement -> ELSE .)
    RCURLY          reduce using rule 8 (statement -> ELSE .)


state 10

    (9) assignment_statement -> IDENTIFIER . ASSIGN expression NEWLINE
    (29) literal -> IDENTIFIER .

    ASSIGN          shift and go to state 22
    NEWLINE         reduce using rule 29 (literal -> IDENTIFIER .)
    MATH_OP         reduce using rule 29 (literal -> IDENTIFIER .)
    COMPARISON_OP   reduce using rule 29 (literal -> IDENTIFIER .)
    LOGICAL_OP      reduce using rule 29 (literal -> IDENTIFIER .)


state 11

    (19) expression_statement -> expression . NEWLINE
    (21) expression -> expression . MATH_OP expression
    (22) expression -> expression . COMPARISON_OP expression
    (23) expression -> expression . LOGICAL_OP expression

    NEWLINE         shift and go to state 23
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26


state 12

    (10) if_statement -> if_clause . NEWLINE statement_list
    (11) if_statement -> if_clause . NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> if_clause . NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list

    NEWLINE         shift and go to state 27


state 13

    (17) while_statement -> while_clause . NEWLINE statement NEWLINE

    NEWLINE         shift and go to state 28


state 14

    (13) if_clause -> KEYWORD . expression
    (14) if_clause -> KEYWORD . expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> KEYWORD . expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 21

    expression                     shift and go to state 29
    literal                        shift and go to state 16

state 15

    (20) expression -> LPAREN . expression RPAREN
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 21

    expression                     shift and go to state 31
    literal                        shift and go to state 16

state 16

    (24) expression -> literal .

    NEWLINE         reduce using rule 24 (expression -> literal .)
    MATH_OP         reduce using rule 24 (expression -> literal .)
    COMPARISON_OP   reduce using rule 24 (expression -> literal .)
    LOGICAL_OP      reduce using rule 24 (expression -> literal .)
    LCURLY          reduce using rule 24 (expression -> literal .)
    RPAREN          reduce using rule 24 (expression -> literal .)


state 17

    (25) literal -> NUMBER .

    NEWLINE         reduce using rule 25 (literal -> NUMBER .)
    MATH_OP         reduce using rule 25 (literal -> NUMBER .)
    COMPARISON_OP   reduce using rule 25 (literal -> NUMBER .)
    LOGICAL_OP      reduce using rule 25 (literal -> NUMBER .)
    LCURLY          reduce using rule 25 (literal -> NUMBER .)
    RPAREN          reduce using rule 25 (literal -> NUMBER .)


state 18

    (26) literal -> FLOAT .

    NEWLINE         reduce using rule 26 (literal -> FLOAT .)
    MATH_OP         reduce using rule 26 (literal -> FLOAT .)
    COMPARISON_OP   reduce using rule 26 (literal -> FLOAT .)
    LOGICAL_OP      reduce using rule 26 (literal -> FLOAT .)
    LCURLY          reduce using rule 26 (literal -> FLOAT .)
    RPAREN          reduce using rule 26 (literal -> FLOAT .)


state 19

    (27) literal -> BOOLEAN .

    NEWLINE         reduce using rule 27 (literal -> BOOLEAN .)
    MATH_OP         reduce using rule 27 (literal -> BOOLEAN .)
    COMPARISON_OP   reduce using rule 27 (literal -> BOOLEAN .)
    LOGICAL_OP      reduce using rule 27 (literal -> BOOLEAN .)
    LCURLY          reduce using rule 27 (literal -> BOOLEAN .)
    RPAREN          reduce using rule 27 (literal -> BOOLEAN .)


state 20

    (28) literal -> CHAR .

    NEWLINE         reduce using rule 28 (literal -> CHAR .)
    MATH_OP         reduce using rule 28 (literal -> CHAR .)
    COMPARISON_OP   reduce using rule 28 (literal -> CHAR .)
    LOGICAL_OP      reduce using rule 28 (literal -> CHAR .)
    LCURLY          reduce using rule 28 (literal -> CHAR .)
    RPAREN          reduce using rule 28 (literal -> CHAR .)


state 21

    (30) literal -> STRING .

    NEWLINE         reduce using rule 30 (literal -> STRING .)
    MATH_OP         reduce using rule 30 (literal -> STRING .)
    COMPARISON_OP   reduce using rule 30 (literal -> STRING .)
    LOGICAL_OP      reduce using rule 30 (literal -> STRING .)
    LCURLY          reduce using rule 30 (literal -> STRING .)
    RPAREN          reduce using rule 30 (literal -> STRING .)


state 22

    (9) assignment_statement -> IDENTIFIER ASSIGN . expression NEWLINE
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 21

    expression                     shift and go to state 32
    literal                        shift and go to state 16

state 23

    (19) expression_statement -> expression NEWLINE .

    $end            reduce using rule 19 (expression_statement -> expression NEWLINE .)
    ELIF            reduce using rule 19 (expression_statement -> expression NEWLINE .)
    BREAK           reduce using rule 19 (expression_statement -> expression NEWLINE .)
    CONTINUE        reduce using rule 19 (expression_statement -> expression NEWLINE .)
    ELSE            reduce using rule 19 (expression_statement -> expression NEWLINE .)
    IDENTIFIER      reduce using rule 19 (expression_statement -> expression NEWLINE .)
    KEYWORD         reduce using rule 19 (expression_statement -> expression NEWLINE .)
    LPAREN          reduce using rule 19 (expression_statement -> expression NEWLINE .)
    NUMBER          reduce using rule 19 (expression_statement -> expression NEWLINE .)
    FLOAT           reduce using rule 19 (expression_statement -> expression NEWLINE .)
    BOOLEAN         reduce using rule 19 (expression_statement -> expression NEWLINE .)
    CHAR            reduce using rule 19 (expression_statement -> expression NEWLINE .)
    STRING          reduce using rule 19 (expression_statement -> expression NEWLINE .)
    NEWLINE         reduce using rule 19 (expression_statement -> expression NEWLINE .)
    RCURLY          reduce using rule 19 (expression_statement -> expression NEWLINE .)


state 24

    (21) expression -> expression MATH_OP . expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 21

    expression                     shift and go to state 33
    literal                        shift and go to state 16

state 25

    (22) expression -> expression COMPARISON_OP . expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 21

    expression                     shift and go to state 34
    literal                        shift and go to state 16

state 26

    (23) expression -> expression LOGICAL_OP . expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    IDENTIFIER      shift and go to state 30
    STRING          shift and go to state 21

    expression                     shift and go to state 35
    literal                        shift and go to state 16

state 27

    (10) if_statement -> if_clause NEWLINE . statement_list
    (11) if_statement -> if_clause NEWLINE . statement_list ELIF NEWLINE statement_list
    (12) if_statement -> if_clause NEWLINE . statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (15) statement_list -> . statement
    (16) statement_list -> . statement_list statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    if_clause                      shift and go to state 12
    statement_list                 shift and go to state 36
    statement                      shift and go to state 37
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 28

    (17) while_statement -> while_clause NEWLINE . statement NEWLINE
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    while_clause                   shift and go to state 13
    statement                      shift and go to state 38
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    if_clause                      shift and go to state 12
    literal                        shift and go to state 16

state 29

    (13) if_clause -> KEYWORD expression .
    (14) if_clause -> KEYWORD expression . LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> KEYWORD expression .
    (21) expression -> expression . MATH_OP expression
    (22) expression -> expression . COMPARISON_OP expression
    (23) expression -> expression . LOGICAL_OP expression

  ! reduce/reduce conflict for NEWLINE resolved using rule 13 (if_clause -> KEYWORD expression .)
    NEWLINE         reduce using rule 13 (if_clause -> KEYWORD expression .)
    LCURLY          shift and go to state 39
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26

  ! NEWLINE         [ reduce using rule 18 (while_clause -> KEYWORD expression .) ]


state 30

    (29) literal -> IDENTIFIER .

    LCURLY          reduce using rule 29 (literal -> IDENTIFIER .)
    MATH_OP         reduce using rule 29 (literal -> IDENTIFIER .)
    COMPARISON_OP   reduce using rule 29 (literal -> IDENTIFIER .)
    LOGICAL_OP      reduce using rule 29 (literal -> IDENTIFIER .)
    NEWLINE         reduce using rule 29 (literal -> IDENTIFIER .)
    RPAREN          reduce using rule 29 (literal -> IDENTIFIER .)


state 31

    (20) expression -> LPAREN expression . RPAREN
    (21) expression -> expression . MATH_OP expression
    (22) expression -> expression . COMPARISON_OP expression
    (23) expression -> expression . LOGICAL_OP expression

    RPAREN          shift and go to state 40
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26


state 32

    (9) assignment_statement -> IDENTIFIER ASSIGN expression . NEWLINE
    (21) expression -> expression . MATH_OP expression
    (22) expression -> expression . COMPARISON_OP expression
    (23) expression -> expression . LOGICAL_OP expression

    NEWLINE         shift and go to state 41
    MATH_OP         shift and go to state 24
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26


state 33

    (21) expression -> expression MATH_OP expression .
    (21) expression -> expression . MATH_OP expression
    (22) expression -> expression . COMPARISON_OP expression
    (23) expression -> expression . LOGICAL_OP expression

    NEWLINE         reduce using rule 21 (expression -> expression MATH_OP expression .)
    MATH_OP         reduce using rule 21 (expression -> expression MATH_OP expression .)
    LCURLY          reduce using rule 21 (expression -> expression MATH_OP expression .)
    RPAREN          reduce using rule 21 (expression -> expression MATH_OP expression .)
    COMPARISON_OP   shift and go to state 25
    LOGICAL_OP      shift and go to state 26

  ! COMPARISON_OP   [ reduce using rule 21 (expression -> expression MATH_OP expression .) ]
  ! LOGICAL_OP      [ reduce using rule 21 (expression -> expression MATH_OP expression .) ]
  ! MATH_OP         [ shift and go to state 24 ]


state 34

    (22) expression -> expression COMPARISON_OP expression .
    (21) expression -> expression . MATH_OP expression
    (22) expression -> expression . COMPARISON_OP expression
    (23) expression -> expression . LOGICAL_OP expression

    NEWLINE         reduce using rule 22 (expression -> expression COMPARISON_OP expression .)
    MATH_OP         reduce using rule 22 (expression -> expression COMPARISON_OP expression .)
    COMPARISON_OP   reduce using rule 22 (expression -> expression COMPARISON_OP expression .)
    LCURLY          reduce using rule 22 (expression -> expression COMPARISON_OP expression .)
    RPAREN          reduce using rule 22 (expression -> expression COMPARISON_OP expression .)
    LOGICAL_OP      shift and go to state 26

  ! LOGICAL_OP      [ reduce using rule 22 (expression -> expression COMPARISON_OP expression .) ]
  ! MATH_OP         [ shift and go to state 24 ]
  ! COMPARISON_OP   [ shift and go to state 25 ]


state 35

    (23) expression -> expression LOGICAL_OP expression .
    (21) expression -> expression . MATH_OP expression
    (22) expression -> expression . COMPARISON_OP expression
    (23) expression -> expression . LOGICAL_OP expression

    NEWLINE         reduce using rule 23 (expression -> expression LOGICAL_OP expression .)
    MATH_OP         reduce using rule 23 (expression -> expression LOGICAL_OP expression .)
    COMPARISON_OP   reduce using rule 23 (expression -> expression LOGICAL_OP expression .)
    LOGICAL_OP      reduce using rule 23 (expression -> expression LOGICAL_OP expression .)
    LCURLY          reduce using rule 23 (expression -> expression LOGICAL_OP expression .)
    RPAREN          reduce using rule 23 (expression -> expression LOGICAL_OP expression .)

  ! MATH_OP         [ shift and go to state 24 ]
  ! COMPARISON_OP   [ shift and go to state 25 ]
  ! LOGICAL_OP      [ shift and go to state 26 ]


state 36

    (10) if_statement -> if_clause NEWLINE statement_list .
    (11) if_statement -> if_clause NEWLINE statement_list . ELIF NEWLINE statement_list
    (12) if_statement -> if_clause NEWLINE statement_list . ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (16) statement_list -> statement_list . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for KEYWORD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .)
    NEWLINE         reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .)
    RCURLY          reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .)
    ELIF            shift and go to state 42
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

  ! ELIF            [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! BREAK           [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! CONTINUE        [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! ELSE            [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! IDENTIFIER      [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! KEYWORD         [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! LPAREN          [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! NUMBER          [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! FLOAT           [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! BOOLEAN         [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! CHAR            [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]
  ! STRING          [ reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list .) ]

    if_clause                      shift and go to state 12
    statement                      shift and go to state 43
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 37

    (15) statement_list -> statement .

    ELIF            reduce using rule 15 (statement_list -> statement .)
    BREAK           reduce using rule 15 (statement_list -> statement .)
    CONTINUE        reduce using rule 15 (statement_list -> statement .)
    ELSE            reduce using rule 15 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 15 (statement_list -> statement .)
    KEYWORD         reduce using rule 15 (statement_list -> statement .)
    LPAREN          reduce using rule 15 (statement_list -> statement .)
    NUMBER          reduce using rule 15 (statement_list -> statement .)
    FLOAT           reduce using rule 15 (statement_list -> statement .)
    BOOLEAN         reduce using rule 15 (statement_list -> statement .)
    CHAR            reduce using rule 15 (statement_list -> statement .)
    STRING          reduce using rule 15 (statement_list -> statement .)
    $end            reduce using rule 15 (statement_list -> statement .)
    NEWLINE         reduce using rule 15 (statement_list -> statement .)
    RCURLY          reduce using rule 15 (statement_list -> statement .)


state 38

    (17) while_statement -> while_clause NEWLINE statement . NEWLINE

    NEWLINE         shift and go to state 44


state 39

    (14) if_clause -> KEYWORD expression LCURLY . NEWLINE statement_list RCURLY

    NEWLINE         shift and go to state 45


state 40

    (20) expression -> LPAREN expression RPAREN .

    NEWLINE         reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    MATH_OP         reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    COMPARISON_OP   reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    LOGICAL_OP      reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    LCURLY          reduce using rule 20 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 20 (expression -> LPAREN expression RPAREN .)


state 41

    (9) assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .

    $end            reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    ELIF            reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    BREAK           reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    CONTINUE        reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    ELSE            reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    IDENTIFIER      reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    KEYWORD         reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    LPAREN          reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    NUMBER          reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    FLOAT           reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    BOOLEAN         reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    CHAR            reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    STRING          reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    NEWLINE         reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    RCURLY          reduce using rule 9 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)


state 42

    (11) if_statement -> if_clause NEWLINE statement_list ELIF . NEWLINE statement_list
    (12) if_statement -> if_clause NEWLINE statement_list ELIF . NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (7) statement -> ELIF .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 46
    ELIF            reduce using rule 7 (statement -> ELIF .)
    BREAK           reduce using rule 7 (statement -> ELIF .)
    CONTINUE        reduce using rule 7 (statement -> ELIF .)
    ELSE            reduce using rule 7 (statement -> ELIF .)
    IDENTIFIER      reduce using rule 7 (statement -> ELIF .)
    KEYWORD         reduce using rule 7 (statement -> ELIF .)
    LPAREN          reduce using rule 7 (statement -> ELIF .)
    NUMBER          reduce using rule 7 (statement -> ELIF .)
    FLOAT           reduce using rule 7 (statement -> ELIF .)
    BOOLEAN         reduce using rule 7 (statement -> ELIF .)
    CHAR            reduce using rule 7 (statement -> ELIF .)
    STRING          reduce using rule 7 (statement -> ELIF .)
    $end            reduce using rule 7 (statement -> ELIF .)
    RCURLY          reduce using rule 7 (statement -> ELIF .)

  ! NEWLINE         [ reduce using rule 7 (statement -> ELIF .) ]


state 43

    (16) statement_list -> statement_list statement .

    ELIF            reduce using rule 16 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 16 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 16 (statement_list -> statement_list statement .)
    ELSE            reduce using rule 16 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 16 (statement_list -> statement_list statement .)
    KEYWORD         reduce using rule 16 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 16 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 16 (statement_list -> statement_list statement .)
    FLOAT           reduce using rule 16 (statement_list -> statement_list statement .)
    BOOLEAN         reduce using rule 16 (statement_list -> statement_list statement .)
    CHAR            reduce using rule 16 (statement_list -> statement_list statement .)
    STRING          reduce using rule 16 (statement_list -> statement_list statement .)
    $end            reduce using rule 16 (statement_list -> statement_list statement .)
    NEWLINE         reduce using rule 16 (statement_list -> statement_list statement .)
    RCURLY          reduce using rule 16 (statement_list -> statement_list statement .)


state 44

    (17) while_statement -> while_clause NEWLINE statement NEWLINE .

    $end            reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    ELIF            reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    BREAK           reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    CONTINUE        reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    ELSE            reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    IDENTIFIER      reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    KEYWORD         reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    LPAREN          reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    NUMBER          reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    FLOAT           reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    BOOLEAN         reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    CHAR            reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    STRING          reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    NEWLINE         reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)
    RCURLY          reduce using rule 17 (while_statement -> while_clause NEWLINE statement NEWLINE .)


state 45

    (14) if_clause -> KEYWORD expression LCURLY NEWLINE . statement_list RCURLY
    (15) statement_list -> . statement
    (16) statement_list -> . statement_list statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 11
    statement_list                 shift and go to state 47
    statement                      shift and go to state 37
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    if_clause                      shift and go to state 12
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 46

    (11) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE . statement_list
    (12) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE . statement_list NEWLINE ELSE NEWLINE statement_list
    (15) statement_list -> . statement
    (16) statement_list -> . statement_list statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    if_clause                      shift and go to state 12
    statement_list                 shift and go to state 48
    statement                      shift and go to state 37
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 47

    (14) if_clause -> KEYWORD expression LCURLY NEWLINE statement_list . RCURLY
    (16) statement_list -> statement_list . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    RCURLY          shift and go to state 49
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    expression                     shift and go to state 11
    statement                      shift and go to state 43
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    if_clause                      shift and go to state 12
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 48

    (11) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .
    (12) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list . NEWLINE ELSE NEWLINE statement_list
    (16) statement_list -> statement_list . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for KEYWORD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .)
    RCURLY          reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .)
    NEWLINE         shift and go to state 50
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

  ! ELIF            [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! BREAK           [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! CONTINUE        [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! ELSE            [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! IDENTIFIER      [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! KEYWORD         [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! LPAREN          [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! NUMBER          [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! FLOAT           [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! BOOLEAN         [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! CHAR            [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! STRING          [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]
  ! NEWLINE         [ reduce using rule 11 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list .) ]

    if_clause                      shift and go to state 12
    statement                      shift and go to state 43
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 49

    (14) if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY .

    NEWLINE         reduce using rule 14 (if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY .)


state 50

    (12) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE . ELSE NEWLINE statement_list

    ELSE            shift and go to state 51


state 51

    (12) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE . NEWLINE statement_list

    NEWLINE         shift and go to state 52


state 52

    (12) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE . statement_list
    (15) statement_list -> . statement
    (16) statement_list -> . statement_list statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

    if_clause                      shift and go to state 12
    statement_list                 shift and go to state 53
    statement                      shift and go to state 37
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16

state 53

    (12) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .
    (16) statement_list -> statement_list . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) statement -> . ELIF
    (8) statement -> . ELSE
    (9) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (10) if_statement -> . if_clause NEWLINE statement_list
    (11) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list
    (12) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list
    (17) while_statement -> . while_clause NEWLINE statement NEWLINE
    (19) expression_statement -> . expression NEWLINE
    (13) if_clause -> . KEYWORD expression
    (14) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (18) while_clause -> . KEYWORD expression
    (20) expression -> . LPAREN expression RPAREN
    (21) expression -> . expression MATH_OP expression
    (22) expression -> . expression COMPARISON_OP expression
    (23) expression -> . expression LOGICAL_OP expression
    (24) expression -> . literal
    (25) literal -> . NUMBER
    (26) literal -> . FLOAT
    (27) literal -> . BOOLEAN
    (28) literal -> . CHAR
    (29) literal -> . IDENTIFIER
    (30) literal -> . STRING

  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for CONTINUE resolved as shift
  ! shift/reduce conflict for ELIF resolved as shift
  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for KEYWORD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
    $end            reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .)
    NEWLINE         reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .)
    RCURLY          reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .)
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    ELIF            shift and go to state 8
    ELSE            shift and go to state 9
    IDENTIFIER      shift and go to state 10
    KEYWORD         shift and go to state 14
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 17
    FLOAT           shift and go to state 18
    BOOLEAN         shift and go to state 19
    CHAR            shift and go to state 20
    STRING          shift and go to state 21

  ! ELIF            [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! BREAK           [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! CONTINUE        [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! ELSE            [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! IDENTIFIER      [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! KEYWORD         [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! LPAREN          [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! NUMBER          [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! FLOAT           [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! BOOLEAN         [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! CHAR            [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]
  ! STRING          [ reduce using rule 12 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list .) ]

    if_clause                      shift and go to state 12
    statement                      shift and go to state 43
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 11
    while_clause                   shift and go to state 13
    literal                        shift and go to state 16
WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELIF in state 36 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 36 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 36 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 36 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 36 resolved as shift
WARNING: shift/reduce conflict for KEYWORD in state 36 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 36 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 36 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 36 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 36 resolved as shift
WARNING: shift/reduce conflict for STRING in state 36 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 42 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 48 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 48 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 48 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 48 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 48 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 48 resolved as shift
WARNING: shift/reduce conflict for KEYWORD in state 48 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 48 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 48 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 48 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 48 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 48 resolved as shift
WARNING: shift/reduce conflict for STRING in state 48 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 53 resolved as shift
WARNING: shift/reduce conflict for CONTINUE in state 53 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 53 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 53 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 53 resolved as shift
WARNING: shift/reduce conflict for KEYWORD in state 53 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 53 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 53 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 53 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 53 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 53 resolved as shift
WARNING: shift/reduce conflict for STRING in state 53 resolved as shift
WARNING: reduce/reduce conflict in state 29 resolved using rule (if_clause -> KEYWORD expression)
WARNING: rejected rule (while_clause -> KEYWORD expression) in state 29
WARNING: Rule (while_clause -> KEYWORD expression) is never reduced
