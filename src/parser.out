Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ASSIGN_OP
    BITWISE_OP

Grammar

Rule 0     S' -> statement
Rule 1     statement -> assignment_statement
Rule 2     statement -> if_statement
Rule 3     statement -> while_statement
Rule 4     statement -> expression_statement
Rule 5     statement -> BREAK
Rule 6     statement -> CONTINUE
Rule 7     assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE
Rule 8     if_statement -> if_clause NEWLINE statement_list END
Rule 9     if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
Rule 10    if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
Rule 11    while_statement -> while_clause NEWLINE statement_list END
Rule 12    if_clause -> KEYWORD expression
Rule 13    if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY
Rule 14    statement_list -> statement
Rule 15    statement_list -> statement_list NEWLINE statement
Rule 16    while_clause -> KEYWORD expression
Rule 17    expression_statement -> expression NEWLINE
Rule 18    expression -> LPAREN expression RPAREN
Rule 19    expression -> expression MATH_OP expression
Rule 20    expression -> expression COMPARISON_OP expression
Rule 21    expression -> expression LOGICAL_OP expression
Rule 22    expression -> literal
Rule 23    literal -> NUMBER
Rule 24    literal -> FLOAT
Rule 25    literal -> BOOLEAN
Rule 26    literal -> CHAR
Rule 27    literal -> IDENTIFIER
Rule 28    literal -> STRING

Terminals, with rules where they appear

ASSIGN               : 7
ASSIGN_OP            : 
BITWISE_OP           : 
BOOLEAN              : 25
BREAK                : 5
CHAR                 : 26
COMPARISON_OP        : 20
CONTINUE             : 6
ELIF                 : 9 10
ELSE                 : 10
END                  : 8 9 10 11
FLOAT                : 24
IDENTIFIER           : 7 27
KEYWORD              : 12 13 16
LCURLY               : 13
LOGICAL_OP           : 21
LPAREN               : 18
MATH_OP              : 19
NEWLINE              : 7 8 9 9 10 10 10 10 11 13 15 17
NUMBER               : 23
RCURLY               : 13
RPAREN               : 18
STRING               : 28
error                : 

Nonterminals, with rules where they appear

assignment_statement : 1
expression           : 7 12 13 16 17 18 19 19 20 20 21 21
expression_statement : 4
if_clause            : 8 9 10
if_statement         : 2
literal              : 22
statement            : 14 15 0
statement_list       : 8 9 9 10 10 10 11 13 15
while_clause         : 11
while_statement      : 3

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    statement                      shift and go to state 1
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9
    if_clause                      shift and go to state 10
    while_clause                   shift and go to state 11
    literal                        shift and go to state 14

state 1

    (0) S' -> statement .



state 2

    (1) statement -> assignment_statement .

    $end            reduce using rule 1 (statement -> assignment_statement .)
    END             reduce using rule 1 (statement -> assignment_statement .)
    ELIF            reduce using rule 1 (statement -> assignment_statement .)
    NEWLINE         reduce using rule 1 (statement -> assignment_statement .)
    RCURLY          reduce using rule 1 (statement -> assignment_statement .)


state 3

    (2) statement -> if_statement .

    $end            reduce using rule 2 (statement -> if_statement .)
    END             reduce using rule 2 (statement -> if_statement .)
    ELIF            reduce using rule 2 (statement -> if_statement .)
    NEWLINE         reduce using rule 2 (statement -> if_statement .)
    RCURLY          reduce using rule 2 (statement -> if_statement .)


state 4

    (3) statement -> while_statement .

    $end            reduce using rule 3 (statement -> while_statement .)
    END             reduce using rule 3 (statement -> while_statement .)
    ELIF            reduce using rule 3 (statement -> while_statement .)
    NEWLINE         reduce using rule 3 (statement -> while_statement .)
    RCURLY          reduce using rule 3 (statement -> while_statement .)


state 5

    (4) statement -> expression_statement .

    $end            reduce using rule 4 (statement -> expression_statement .)
    END             reduce using rule 4 (statement -> expression_statement .)
    ELIF            reduce using rule 4 (statement -> expression_statement .)
    NEWLINE         reduce using rule 4 (statement -> expression_statement .)
    RCURLY          reduce using rule 4 (statement -> expression_statement .)


state 6

    (5) statement -> BREAK .

    $end            reduce using rule 5 (statement -> BREAK .)
    END             reduce using rule 5 (statement -> BREAK .)
    ELIF            reduce using rule 5 (statement -> BREAK .)
    NEWLINE         reduce using rule 5 (statement -> BREAK .)
    RCURLY          reduce using rule 5 (statement -> BREAK .)


state 7

    (6) statement -> CONTINUE .

    $end            reduce using rule 6 (statement -> CONTINUE .)
    END             reduce using rule 6 (statement -> CONTINUE .)
    ELIF            reduce using rule 6 (statement -> CONTINUE .)
    NEWLINE         reduce using rule 6 (statement -> CONTINUE .)
    RCURLY          reduce using rule 6 (statement -> CONTINUE .)


state 8

    (7) assignment_statement -> IDENTIFIER . ASSIGN expression NEWLINE
    (27) literal -> IDENTIFIER .

    ASSIGN          shift and go to state 20
    NEWLINE         reduce using rule 27 (literal -> IDENTIFIER .)
    MATH_OP         reduce using rule 27 (literal -> IDENTIFIER .)
    COMPARISON_OP   reduce using rule 27 (literal -> IDENTIFIER .)
    LOGICAL_OP      reduce using rule 27 (literal -> IDENTIFIER .)


state 9

    (17) expression_statement -> expression . NEWLINE
    (19) expression -> expression . MATH_OP expression
    (20) expression -> expression . COMPARISON_OP expression
    (21) expression -> expression . LOGICAL_OP expression

    NEWLINE         shift and go to state 21
    MATH_OP         shift and go to state 22
    COMPARISON_OP   shift and go to state 23
    LOGICAL_OP      shift and go to state 24


state 10

    (8) if_statement -> if_clause . NEWLINE statement_list END
    (9) if_statement -> if_clause . NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> if_clause . NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END

    NEWLINE         shift and go to state 25


state 11

    (11) while_statement -> while_clause . NEWLINE statement_list END

    NEWLINE         shift and go to state 26


state 12

    (12) if_clause -> KEYWORD . expression
    (13) if_clause -> KEYWORD . expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> KEYWORD . expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 19

    expression                     shift and go to state 27
    literal                        shift and go to state 14

state 13

    (18) expression -> LPAREN . expression RPAREN
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 19

    expression                     shift and go to state 29
    literal                        shift and go to state 14

state 14

    (22) expression -> literal .

    NEWLINE         reduce using rule 22 (expression -> literal .)
    MATH_OP         reduce using rule 22 (expression -> literal .)
    COMPARISON_OP   reduce using rule 22 (expression -> literal .)
    LOGICAL_OP      reduce using rule 22 (expression -> literal .)
    LCURLY          reduce using rule 22 (expression -> literal .)
    RPAREN          reduce using rule 22 (expression -> literal .)


state 15

    (23) literal -> NUMBER .

    NEWLINE         reduce using rule 23 (literal -> NUMBER .)
    MATH_OP         reduce using rule 23 (literal -> NUMBER .)
    COMPARISON_OP   reduce using rule 23 (literal -> NUMBER .)
    LOGICAL_OP      reduce using rule 23 (literal -> NUMBER .)
    LCURLY          reduce using rule 23 (literal -> NUMBER .)
    RPAREN          reduce using rule 23 (literal -> NUMBER .)


state 16

    (24) literal -> FLOAT .

    NEWLINE         reduce using rule 24 (literal -> FLOAT .)
    MATH_OP         reduce using rule 24 (literal -> FLOAT .)
    COMPARISON_OP   reduce using rule 24 (literal -> FLOAT .)
    LOGICAL_OP      reduce using rule 24 (literal -> FLOAT .)
    LCURLY          reduce using rule 24 (literal -> FLOAT .)
    RPAREN          reduce using rule 24 (literal -> FLOAT .)


state 17

    (25) literal -> BOOLEAN .

    NEWLINE         reduce using rule 25 (literal -> BOOLEAN .)
    MATH_OP         reduce using rule 25 (literal -> BOOLEAN .)
    COMPARISON_OP   reduce using rule 25 (literal -> BOOLEAN .)
    LOGICAL_OP      reduce using rule 25 (literal -> BOOLEAN .)
    LCURLY          reduce using rule 25 (literal -> BOOLEAN .)
    RPAREN          reduce using rule 25 (literal -> BOOLEAN .)


state 18

    (26) literal -> CHAR .

    NEWLINE         reduce using rule 26 (literal -> CHAR .)
    MATH_OP         reduce using rule 26 (literal -> CHAR .)
    COMPARISON_OP   reduce using rule 26 (literal -> CHAR .)
    LOGICAL_OP      reduce using rule 26 (literal -> CHAR .)
    LCURLY          reduce using rule 26 (literal -> CHAR .)
    RPAREN          reduce using rule 26 (literal -> CHAR .)


state 19

    (28) literal -> STRING .

    NEWLINE         reduce using rule 28 (literal -> STRING .)
    MATH_OP         reduce using rule 28 (literal -> STRING .)
    COMPARISON_OP   reduce using rule 28 (literal -> STRING .)
    LOGICAL_OP      reduce using rule 28 (literal -> STRING .)
    LCURLY          reduce using rule 28 (literal -> STRING .)
    RPAREN          reduce using rule 28 (literal -> STRING .)


state 20

    (7) assignment_statement -> IDENTIFIER ASSIGN . expression NEWLINE
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 19

    expression                     shift and go to state 30
    literal                        shift and go to state 14

state 21

    (17) expression_statement -> expression NEWLINE .

    $end            reduce using rule 17 (expression_statement -> expression NEWLINE .)
    END             reduce using rule 17 (expression_statement -> expression NEWLINE .)
    ELIF            reduce using rule 17 (expression_statement -> expression NEWLINE .)
    NEWLINE         reduce using rule 17 (expression_statement -> expression NEWLINE .)
    RCURLY          reduce using rule 17 (expression_statement -> expression NEWLINE .)


state 22

    (19) expression -> expression MATH_OP . expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 19

    expression                     shift and go to state 31
    literal                        shift and go to state 14

state 23

    (20) expression -> expression COMPARISON_OP . expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 19

    expression                     shift and go to state 32
    literal                        shift and go to state 14

state 24

    (21) expression -> expression LOGICAL_OP . expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    IDENTIFIER      shift and go to state 28
    STRING          shift and go to state 19

    expression                     shift and go to state 33
    literal                        shift and go to state 14

state 25

    (8) if_statement -> if_clause NEWLINE . statement_list END
    (9) if_statement -> if_clause NEWLINE . statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> if_clause NEWLINE . statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (14) statement_list -> . statement
    (15) statement_list -> . statement_list NEWLINE statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    if_clause                      shift and go to state 10
    statement_list                 shift and go to state 34
    statement                      shift and go to state 35
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9
    while_clause                   shift and go to state 11
    literal                        shift and go to state 14

state 26

    (11) while_statement -> while_clause NEWLINE . statement_list END
    (14) statement_list -> . statement
    (15) statement_list -> . statement_list NEWLINE statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    while_clause                   shift and go to state 11
    statement_list                 shift and go to state 36
    statement                      shift and go to state 35
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9
    if_clause                      shift and go to state 10
    literal                        shift and go to state 14

state 27

    (12) if_clause -> KEYWORD expression .
    (13) if_clause -> KEYWORD expression . LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> KEYWORD expression .
    (19) expression -> expression . MATH_OP expression
    (20) expression -> expression . COMPARISON_OP expression
    (21) expression -> expression . LOGICAL_OP expression

  ! reduce/reduce conflict for NEWLINE resolved using rule 12 (if_clause -> KEYWORD expression .)
    NEWLINE         reduce using rule 12 (if_clause -> KEYWORD expression .)
    LCURLY          shift and go to state 37
    MATH_OP         shift and go to state 22
    COMPARISON_OP   shift and go to state 23
    LOGICAL_OP      shift and go to state 24

  ! NEWLINE         [ reduce using rule 16 (while_clause -> KEYWORD expression .) ]


state 28

    (27) literal -> IDENTIFIER .

    LCURLY          reduce using rule 27 (literal -> IDENTIFIER .)
    MATH_OP         reduce using rule 27 (literal -> IDENTIFIER .)
    COMPARISON_OP   reduce using rule 27 (literal -> IDENTIFIER .)
    LOGICAL_OP      reduce using rule 27 (literal -> IDENTIFIER .)
    NEWLINE         reduce using rule 27 (literal -> IDENTIFIER .)
    RPAREN          reduce using rule 27 (literal -> IDENTIFIER .)


state 29

    (18) expression -> LPAREN expression . RPAREN
    (19) expression -> expression . MATH_OP expression
    (20) expression -> expression . COMPARISON_OP expression
    (21) expression -> expression . LOGICAL_OP expression

    RPAREN          shift and go to state 38
    MATH_OP         shift and go to state 22
    COMPARISON_OP   shift and go to state 23
    LOGICAL_OP      shift and go to state 24


state 30

    (7) assignment_statement -> IDENTIFIER ASSIGN expression . NEWLINE
    (19) expression -> expression . MATH_OP expression
    (20) expression -> expression . COMPARISON_OP expression
    (21) expression -> expression . LOGICAL_OP expression

    NEWLINE         shift and go to state 39
    MATH_OP         shift and go to state 22
    COMPARISON_OP   shift and go to state 23
    LOGICAL_OP      shift and go to state 24


state 31

    (19) expression -> expression MATH_OP expression .
    (19) expression -> expression . MATH_OP expression
    (20) expression -> expression . COMPARISON_OP expression
    (21) expression -> expression . LOGICAL_OP expression

    NEWLINE         reduce using rule 19 (expression -> expression MATH_OP expression .)
    MATH_OP         reduce using rule 19 (expression -> expression MATH_OP expression .)
    LCURLY          reduce using rule 19 (expression -> expression MATH_OP expression .)
    RPAREN          reduce using rule 19 (expression -> expression MATH_OP expression .)
    COMPARISON_OP   shift and go to state 23
    LOGICAL_OP      shift and go to state 24

  ! COMPARISON_OP   [ reduce using rule 19 (expression -> expression MATH_OP expression .) ]
  ! LOGICAL_OP      [ reduce using rule 19 (expression -> expression MATH_OP expression .) ]
  ! MATH_OP         [ shift and go to state 22 ]


state 32

    (20) expression -> expression COMPARISON_OP expression .
    (19) expression -> expression . MATH_OP expression
    (20) expression -> expression . COMPARISON_OP expression
    (21) expression -> expression . LOGICAL_OP expression

    NEWLINE         reduce using rule 20 (expression -> expression COMPARISON_OP expression .)
    MATH_OP         reduce using rule 20 (expression -> expression COMPARISON_OP expression .)
    COMPARISON_OP   reduce using rule 20 (expression -> expression COMPARISON_OP expression .)
    LCURLY          reduce using rule 20 (expression -> expression COMPARISON_OP expression .)
    RPAREN          reduce using rule 20 (expression -> expression COMPARISON_OP expression .)
    LOGICAL_OP      shift and go to state 24

  ! LOGICAL_OP      [ reduce using rule 20 (expression -> expression COMPARISON_OP expression .) ]
  ! MATH_OP         [ shift and go to state 22 ]
  ! COMPARISON_OP   [ shift and go to state 23 ]


state 33

    (21) expression -> expression LOGICAL_OP expression .
    (19) expression -> expression . MATH_OP expression
    (20) expression -> expression . COMPARISON_OP expression
    (21) expression -> expression . LOGICAL_OP expression

    NEWLINE         reduce using rule 21 (expression -> expression LOGICAL_OP expression .)
    MATH_OP         reduce using rule 21 (expression -> expression LOGICAL_OP expression .)
    COMPARISON_OP   reduce using rule 21 (expression -> expression LOGICAL_OP expression .)
    LOGICAL_OP      reduce using rule 21 (expression -> expression LOGICAL_OP expression .)
    LCURLY          reduce using rule 21 (expression -> expression LOGICAL_OP expression .)
    RPAREN          reduce using rule 21 (expression -> expression LOGICAL_OP expression .)

  ! MATH_OP         [ shift and go to state 22 ]
  ! COMPARISON_OP   [ shift and go to state 23 ]
  ! LOGICAL_OP      [ shift and go to state 24 ]


state 34

    (8) if_statement -> if_clause NEWLINE statement_list . END
    (9) if_statement -> if_clause NEWLINE statement_list . ELIF NEWLINE statement_list END
    (10) if_statement -> if_clause NEWLINE statement_list . ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (15) statement_list -> statement_list . NEWLINE statement

    END             shift and go to state 41
    ELIF            shift and go to state 42
    NEWLINE         shift and go to state 40


state 35

    (14) statement_list -> statement .

    END             reduce using rule 14 (statement_list -> statement .)
    ELIF            reduce using rule 14 (statement_list -> statement .)
    NEWLINE         reduce using rule 14 (statement_list -> statement .)
    RCURLY          reduce using rule 14 (statement_list -> statement .)


state 36

    (11) while_statement -> while_clause NEWLINE statement_list . END
    (15) statement_list -> statement_list . NEWLINE statement

    END             shift and go to state 43
    NEWLINE         shift and go to state 40


state 37

    (13) if_clause -> KEYWORD expression LCURLY . NEWLINE statement_list RCURLY

    NEWLINE         shift and go to state 44


state 38

    (18) expression -> LPAREN expression RPAREN .

    NEWLINE         reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    MATH_OP         reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    COMPARISON_OP   reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    LOGICAL_OP      reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    LCURLY          reduce using rule 18 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 18 (expression -> LPAREN expression RPAREN .)


state 39

    (7) assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .

    $end            reduce using rule 7 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    END             reduce using rule 7 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    ELIF            reduce using rule 7 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    NEWLINE         reduce using rule 7 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)
    RCURLY          reduce using rule 7 (assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE .)


state 40

    (15) statement_list -> statement_list NEWLINE . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    statement                      shift and go to state 45
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9
    if_clause                      shift and go to state 10
    while_clause                   shift and go to state 11
    literal                        shift and go to state 14

state 41

    (8) if_statement -> if_clause NEWLINE statement_list END .

    $end            reduce using rule 8 (if_statement -> if_clause NEWLINE statement_list END .)
    END             reduce using rule 8 (if_statement -> if_clause NEWLINE statement_list END .)
    ELIF            reduce using rule 8 (if_statement -> if_clause NEWLINE statement_list END .)
    NEWLINE         reduce using rule 8 (if_statement -> if_clause NEWLINE statement_list END .)
    RCURLY          reduce using rule 8 (if_statement -> if_clause NEWLINE statement_list END .)


state 42

    (9) if_statement -> if_clause NEWLINE statement_list ELIF . NEWLINE statement_list END
    (10) if_statement -> if_clause NEWLINE statement_list ELIF . NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END

    NEWLINE         shift and go to state 46


state 43

    (11) while_statement -> while_clause NEWLINE statement_list END .

    $end            reduce using rule 11 (while_statement -> while_clause NEWLINE statement_list END .)
    END             reduce using rule 11 (while_statement -> while_clause NEWLINE statement_list END .)
    ELIF            reduce using rule 11 (while_statement -> while_clause NEWLINE statement_list END .)
    NEWLINE         reduce using rule 11 (while_statement -> while_clause NEWLINE statement_list END .)
    RCURLY          reduce using rule 11 (while_statement -> while_clause NEWLINE statement_list END .)


state 44

    (13) if_clause -> KEYWORD expression LCURLY NEWLINE . statement_list RCURLY
    (14) statement_list -> . statement
    (15) statement_list -> . statement_list NEWLINE statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    expression                     shift and go to state 9
    statement_list                 shift and go to state 47
    statement                      shift and go to state 35
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    if_clause                      shift and go to state 10
    while_clause                   shift and go to state 11
    literal                        shift and go to state 14

state 45

    (15) statement_list -> statement_list NEWLINE statement .

    END             reduce using rule 15 (statement_list -> statement_list NEWLINE statement .)
    ELIF            reduce using rule 15 (statement_list -> statement_list NEWLINE statement .)
    NEWLINE         reduce using rule 15 (statement_list -> statement_list NEWLINE statement .)
    RCURLY          reduce using rule 15 (statement_list -> statement_list NEWLINE statement .)


state 46

    (9) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE . statement_list END
    (10) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE . statement_list NEWLINE ELSE NEWLINE statement_list END
    (14) statement_list -> . statement
    (15) statement_list -> . statement_list NEWLINE statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    if_clause                      shift and go to state 10
    statement_list                 shift and go to state 48
    statement                      shift and go to state 35
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9
    while_clause                   shift and go to state 11
    literal                        shift and go to state 14

state 47

    (13) if_clause -> KEYWORD expression LCURLY NEWLINE statement_list . RCURLY
    (15) statement_list -> statement_list . NEWLINE statement

    RCURLY          shift and go to state 49
    NEWLINE         shift and go to state 40


state 48

    (9) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list . END
    (10) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list . NEWLINE ELSE NEWLINE statement_list END
    (15) statement_list -> statement_list . NEWLINE statement

    END             shift and go to state 51
    NEWLINE         shift and go to state 50


state 49

    (13) if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY .

    NEWLINE         reduce using rule 13 (if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY .)


state 50

    (10) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE . ELSE NEWLINE statement_list END
    (15) statement_list -> statement_list NEWLINE . statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    ELSE            shift and go to state 52
    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    if_clause                      shift and go to state 10
    statement                      shift and go to state 45
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9
    while_clause                   shift and go to state 11
    literal                        shift and go to state 14

state 51

    (9) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list END .

    $end            reduce using rule 9 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list END .)
    END             reduce using rule 9 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list END .)
    ELIF            reduce using rule 9 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list END .)
    NEWLINE         reduce using rule 9 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list END .)
    RCURLY          reduce using rule 9 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list END .)


state 52

    (10) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE . NEWLINE statement_list END

    NEWLINE         shift and go to state 53


state 53

    (10) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE . statement_list END
    (14) statement_list -> . statement
    (15) statement_list -> . statement_list NEWLINE statement
    (1) statement -> . assignment_statement
    (2) statement -> . if_statement
    (3) statement -> . while_statement
    (4) statement -> . expression_statement
    (5) statement -> . BREAK
    (6) statement -> . CONTINUE
    (7) assignment_statement -> . IDENTIFIER ASSIGN expression NEWLINE
    (8) if_statement -> . if_clause NEWLINE statement_list END
    (9) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list END
    (10) if_statement -> . if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END
    (11) while_statement -> . while_clause NEWLINE statement_list END
    (17) expression_statement -> . expression NEWLINE
    (12) if_clause -> . KEYWORD expression
    (13) if_clause -> . KEYWORD expression LCURLY NEWLINE statement_list RCURLY
    (16) while_clause -> . KEYWORD expression
    (18) expression -> . LPAREN expression RPAREN
    (19) expression -> . expression MATH_OP expression
    (20) expression -> . expression COMPARISON_OP expression
    (21) expression -> . expression LOGICAL_OP expression
    (22) expression -> . literal
    (23) literal -> . NUMBER
    (24) literal -> . FLOAT
    (25) literal -> . BOOLEAN
    (26) literal -> . CHAR
    (27) literal -> . IDENTIFIER
    (28) literal -> . STRING

    BREAK           shift and go to state 6
    CONTINUE        shift and go to state 7
    IDENTIFIER      shift and go to state 8
    KEYWORD         shift and go to state 12
    LPAREN          shift and go to state 13
    NUMBER          shift and go to state 15
    FLOAT           shift and go to state 16
    BOOLEAN         shift and go to state 17
    CHAR            shift and go to state 18
    STRING          shift and go to state 19

    if_clause                      shift and go to state 10
    statement_list                 shift and go to state 54
    statement                      shift and go to state 35
    assignment_statement           shift and go to state 2
    if_statement                   shift and go to state 3
    while_statement                shift and go to state 4
    expression_statement           shift and go to state 5
    expression                     shift and go to state 9
    while_clause                   shift and go to state 11
    literal                        shift and go to state 14

state 54

    (10) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list . END
    (15) statement_list -> statement_list . NEWLINE statement

    END             shift and go to state 55
    NEWLINE         shift and go to state 40


state 55

    (10) if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END .

    $end            reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END .)
    END             reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END .)
    ELIF            reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END .)
    NEWLINE         reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END .)
    RCURLY          reduce using rule 10 (if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 27 resolved using rule (if_clause -> KEYWORD expression)
WARNING: rejected rule (while_clause -> KEYWORD expression) in state 27
WARNING: Rule (while_clause -> KEYWORD expression) is never reduced
