
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftMATH_OPleftCOMPARISON_OPleftLOGICAL_OPASSIGN ASSIGN_OP BITWISE_OP BOOLEAN BREAK CHAR COMMENT COMPARISON_OP CONTINUE ELIF ELSE EOF EXPONENT FLOAT IDENTIFIER KEYWORD LCURLY LOGICAL_OP LPAREN MATH_OP NEWLINE NUMBER RCURLY RPAREN SEPARATOR STRING\n    statement : assignment_statement\n              | if_statement\n              | while_statement\n              | expression_statement\n              | BREAK\n              | CONTINUE\n              | ELIF\n              | ELSE\n    assignment_statement : IDENTIFIER ASSIGN expression NEWLINE\n    if_statement : if_clause NEWLINE statement_list\n                 | if_clause NEWLINE statement_list ELIF NEWLINE statement_list\n                 | if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list\n    \n    if_clause : KEYWORD expression\n              | KEYWORD expression LCURLY NEWLINE statement_list RCURLY\n    \n    statement_list : statement\n                   | statement_list statement\n    while_statement : while_clause NEWLINE statement NEWLINEwhile_clause : KEYWORD expressionexpression_statement : expression NEWLINEexpression : LPAREN expression RPAREN\n    expression : expression MATH_OP expression\n               | expression COMPARISON_OP expression\n               | expression LOGICAL_OP expression\n    expression : literal\n    literal : NUMBER\n            | FLOAT\n            | BOOLEAN\n            | CHAR\n            | IDENTIFIER\n            | STRING\n    '
    
_lr_action_items = {'BREAK':([0,2,3,4,5,6,7,8,9,23,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[6,-1,-2,-3,-4,-5,-6,-7,-8,-19,6,6,6,-15,-9,-7,-16,-17,6,6,6,6,6,6,]),'CONTINUE':([0,2,3,4,5,6,7,8,9,23,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[7,-1,-2,-3,-4,-5,-6,-7,-8,-19,7,7,7,-15,-9,-7,-16,-17,7,7,7,7,7,7,]),'ELIF':([0,2,3,4,5,6,7,8,9,23,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[8,-1,-2,-3,-4,-5,-6,-7,-8,-19,8,8,42,-15,-9,-7,-16,-17,8,8,8,8,8,8,]),'ELSE':([0,2,3,4,5,6,7,8,9,23,27,28,36,37,41,42,43,44,45,46,47,48,50,52,53,],[9,-1,-2,-3,-4,-5,-6,-7,-8,-19,9,9,9,-15,-9,-7,-16,-17,9,9,9,9,51,9,9,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,14,15,22,23,24,25,26,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[10,-1,-2,-3,-4,-5,-6,-7,-8,30,30,30,-19,30,30,30,10,10,10,-15,-9,-7,-16,-17,10,10,10,10,10,10,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,23,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[14,-1,-2,-3,-4,-5,-6,-7,-8,-19,14,14,14,-15,-9,-7,-16,-17,14,14,14,14,14,14,]),'LPAREN':([0,2,3,4,5,6,7,8,9,14,15,22,23,24,25,26,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[15,-1,-2,-3,-4,-5,-6,-7,-8,15,15,15,-19,15,15,15,15,15,15,-15,-9,-7,-16,-17,15,15,15,15,15,15,]),'NUMBER':([0,2,3,4,5,6,7,8,9,14,15,22,23,24,25,26,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[17,-1,-2,-3,-4,-5,-6,-7,-8,17,17,17,-19,17,17,17,17,17,17,-15,-9,-7,-16,-17,17,17,17,17,17,17,]),'FLOAT':([0,2,3,4,5,6,7,8,9,14,15,22,23,24,25,26,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[18,-1,-2,-3,-4,-5,-6,-7,-8,18,18,18,-19,18,18,18,18,18,18,-15,-9,-7,-16,-17,18,18,18,18,18,18,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,14,15,22,23,24,25,26,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[19,-1,-2,-3,-4,-5,-6,-7,-8,19,19,19,-19,19,19,19,19,19,19,-15,-9,-7,-16,-17,19,19,19,19,19,19,]),'CHAR':([0,2,3,4,5,6,7,8,9,14,15,22,23,24,25,26,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[20,-1,-2,-3,-4,-5,-6,-7,-8,20,20,20,-19,20,20,20,20,20,20,-15,-9,-7,-16,-17,20,20,20,20,20,20,]),'STRING':([0,2,3,4,5,6,7,8,9,14,15,22,23,24,25,26,27,28,36,37,41,42,43,44,45,46,47,48,52,53,],[21,-1,-2,-3,-4,-5,-6,-7,-8,21,21,21,-19,21,21,21,21,21,21,-15,-9,-7,-16,-17,21,21,21,21,21,21,]),'$end':([1,2,3,4,5,6,7,8,9,23,36,37,41,42,43,44,48,53,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-19,-10,-15,-9,-7,-16,-17,-11,-12,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,12,13,16,17,18,19,20,21,23,29,30,32,33,34,35,36,37,38,39,40,41,42,43,44,48,49,51,53,],[-1,-2,-3,-4,-5,-6,-7,-8,-29,23,27,28,-24,-25,-26,-27,-28,-30,-19,-13,-29,41,-21,-22,-23,-10,-15,44,45,-20,-9,46,-16,-17,50,-14,52,-12,]),'RCURLY':([2,3,4,5,6,7,8,9,23,36,37,41,42,43,44,47,48,53,],[-1,-2,-3,-4,-5,-6,-7,-8,-19,-10,-15,-9,-7,-16,-17,49,-11,-12,]),'ASSIGN':([10,],[22,]),'MATH_OP':([10,11,16,17,18,19,20,21,29,30,31,32,33,34,35,40,],[-29,24,-24,-25,-26,-27,-28,-30,24,-29,24,24,-21,-22,-23,-20,]),'COMPARISON_OP':([10,11,16,17,18,19,20,21,29,30,31,32,33,34,35,40,],[-29,25,-24,-25,-26,-27,-28,-30,25,-29,25,25,25,-22,-23,-20,]),'LOGICAL_OP':([10,11,16,17,18,19,20,21,29,30,31,32,33,34,35,40,],[-29,26,-24,-25,-26,-27,-28,-30,26,-29,26,26,26,26,-23,-20,]),'LCURLY':([16,17,18,19,20,21,29,30,33,34,35,40,],[-24,-25,-26,-27,-28,-30,39,-29,-21,-22,-23,-20,]),'RPAREN':([16,17,18,19,20,21,30,31,33,34,35,40,],[-24,-25,-26,-27,-28,-30,-29,40,-21,-22,-23,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,27,28,36,45,46,47,48,52,53,],[1,37,38,43,37,37,43,43,37,43,]),'assignment_statement':([0,27,28,36,45,46,47,48,52,53,],[2,2,2,2,2,2,2,2,2,2,]),'if_statement':([0,27,28,36,45,46,47,48,52,53,],[3,3,3,3,3,3,3,3,3,3,]),'while_statement':([0,27,28,36,45,46,47,48,52,53,],[4,4,4,4,4,4,4,4,4,4,]),'expression_statement':([0,27,28,36,45,46,47,48,52,53,],[5,5,5,5,5,5,5,5,5,5,]),'expression':([0,14,15,22,24,25,26,27,28,36,45,46,47,48,52,53,],[11,29,31,32,33,34,35,11,11,11,11,11,11,11,11,11,]),'if_clause':([0,27,28,36,45,46,47,48,52,53,],[12,12,12,12,12,12,12,12,12,12,]),'while_clause':([0,27,28,36,45,46,47,48,52,53,],[13,13,13,13,13,13,13,13,13,13,]),'literal':([0,14,15,22,24,25,26,27,28,36,45,46,47,48,52,53,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'statement_list':([27,45,46,52,],[36,47,48,53,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assignment_statement','statement',1,'p_statement','lexer.py',127),
  ('statement -> if_statement','statement',1,'p_statement','lexer.py',128),
  ('statement -> while_statement','statement',1,'p_statement','lexer.py',129),
  ('statement -> expression_statement','statement',1,'p_statement','lexer.py',130),
  ('statement -> BREAK','statement',1,'p_statement','lexer.py',131),
  ('statement -> CONTINUE','statement',1,'p_statement','lexer.py',132),
  ('statement -> ELIF','statement',1,'p_statement','lexer.py',133),
  ('statement -> ELSE','statement',1,'p_statement','lexer.py',134),
  ('assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','lexer.py',140),
  ('if_statement -> if_clause NEWLINE statement_list','if_statement',3,'p_if_statement','lexer.py',146),
  ('if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list','if_statement',6,'p_if_statement','lexer.py',147),
  ('if_statement -> if_clause NEWLINE statement_list ELIF NEWLINE statement_list NEWLINE ELSE NEWLINE statement_list','if_statement',10,'p_if_statement','lexer.py',148),
  ('if_clause -> KEYWORD expression','if_clause',2,'p_if_clause','lexer.py',160),
  ('if_clause -> KEYWORD expression LCURLY NEWLINE statement_list RCURLY','if_clause',6,'p_if_clause','lexer.py',161),
  ('statement_list -> statement','statement_list',1,'p_statement_list','lexer.py',171),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','lexer.py',172),
  ('while_statement -> while_clause NEWLINE statement NEWLINE','while_statement',4,'p_while_statement','lexer.py',181),
  ('while_clause -> KEYWORD expression','while_clause',2,'p_while_clause','lexer.py',186),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','lexer.py',191),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_grouped','lexer.py',211),
  ('expression -> expression MATH_OP expression','expression',3,'p_expression_binop','lexer.py',217),
  ('expression -> expression COMPARISON_OP expression','expression',3,'p_expression_binop','lexer.py',218),
  ('expression -> expression LOGICAL_OP expression','expression',3,'p_expression_binop','lexer.py',219),
  ('expression -> literal','expression',1,'p_expression_literal','lexer.py',225),
  ('literal -> NUMBER','literal',1,'p_literal','lexer.py',231),
  ('literal -> FLOAT','literal',1,'p_literal','lexer.py',232),
  ('literal -> BOOLEAN','literal',1,'p_literal','lexer.py',233),
  ('literal -> CHAR','literal',1,'p_literal','lexer.py',234),
  ('literal -> IDENTIFIER','literal',1,'p_literal','lexer.py',235),
  ('literal -> STRING','literal',1,'p_literal','lexer.py',236),
]
