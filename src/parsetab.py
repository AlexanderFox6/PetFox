
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN ASSIGN_OP BITWISE_OP BOOLEAN BREAK CHAR COMMENT COMPARISON_OP CONTINUE ELIF EOF EXPONENT FLOAT IDENTIFIER KEYWORD LCURLY LOGICAL_OP LPAREN MATH_OP NEWLINE NUMBER RCURLY RPAREN SEPARATOR STRING\n    statement : assignment_statement\n              | if_statement\n              | while_statement\n              | expression_statement\n              | BREAK\n              | CONTINUE\n              | ELIF\n    assignment_statement : IDENTIFIER ASSIGN expression NEWLINEif_statement : if_clause NEWLINE statement NEWLINEif_clause : KEYWORD expressionwhile_statement : while_clause NEWLINE statement NEWLINEwhile_clause : KEYWORD expressionexpression_statement : expression NEWLINE\n    expression : NUMBER\n               | FLOAT\n               | BOOLEAN\n               | CHAR\n               | IDENTIFIER\n               | STRING\n               | math_expression\n               | comparison_expression\n               | logical_expression\n    math_expression : expression MATH_OP expressioncomparison_expression : expression COMPARISON_OP expressionlogical_expression : expression LOGICAL_OP expression'
    
_lr_action_items = {'BREAK':([0,27,28,],[6,6,6,]),'CONTINUE':([0,27,28,],[7,7,7,]),'ELIF':([0,27,28,],[8,8,8,]),'IDENTIFIER':([0,13,22,24,25,26,27,28,],[9,30,30,30,30,30,9,9,]),'KEYWORD':([0,27,28,],[13,13,13,]),'NUMBER':([0,13,22,24,25,26,27,28,],[14,14,14,14,14,14,14,14,]),'FLOAT':([0,13,22,24,25,26,27,28,],[15,15,15,15,15,15,15,15,]),'BOOLEAN':([0,13,22,24,25,26,27,28,],[16,16,16,16,16,16,16,16,]),'CHAR':([0,13,22,24,25,26,27,28,],[17,17,17,17,17,17,17,17,]),'STRING':([0,13,22,24,25,26,27,28,],[18,18,18,18,18,18,18,18,]),'$end':([1,2,3,4,5,6,7,8,23,37,38,39,],[0,-1,-2,-3,-4,-5,-6,-7,-13,-8,-9,-11,]),'NEWLINE':([2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,23,29,30,31,32,33,34,35,36,37,38,39,],[-1,-2,-3,-4,-5,-6,-7,-18,23,27,28,-14,-15,-16,-17,-19,-20,-21,-22,-13,-10,-18,37,-23,-24,-25,38,39,-8,-9,-11,]),'ASSIGN':([9,],[22,]),'MATH_OP':([9,10,14,15,16,17,18,19,20,21,29,30,31,32,33,34,],[-18,24,-14,-15,-16,-17,-19,-20,-21,-22,24,-18,24,24,24,24,]),'COMPARISON_OP':([9,10,14,15,16,17,18,19,20,21,29,30,31,32,33,34,],[-18,25,-14,-15,-16,-17,-19,-20,-21,-22,25,-18,25,25,25,25,]),'LOGICAL_OP':([9,10,14,15,16,17,18,19,20,21,29,30,31,32,33,34,],[-18,26,-14,-15,-16,-17,-19,-20,-21,-22,26,-18,26,26,26,26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,27,28,],[1,35,36,]),'assignment_statement':([0,27,28,],[2,2,2,]),'if_statement':([0,27,28,],[3,3,3,]),'while_statement':([0,27,28,],[4,4,4,]),'expression_statement':([0,27,28,],[5,5,5,]),'expression':([0,13,22,24,25,26,27,28,],[10,29,31,32,33,34,10,10,]),'if_clause':([0,27,28,],[11,11,11,]),'while_clause':([0,27,28,],[12,12,12,]),'math_expression':([0,13,22,24,25,26,27,28,],[19,19,19,19,19,19,19,19,]),'comparison_expression':([0,13,22,24,25,26,27,28,],[20,20,20,20,20,20,20,20,]),'logical_expression':([0,13,22,24,25,26,27,28,],[21,21,21,21,21,21,21,21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assignment_statement','statement',1,'p_statement','parser.py',7),
  ('statement -> if_statement','statement',1,'p_statement','parser.py',8),
  ('statement -> while_statement','statement',1,'p_statement','parser.py',9),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',10),
  ('statement -> BREAK','statement',1,'p_statement','parser.py',11),
  ('statement -> CONTINUE','statement',1,'p_statement','parser.py',12),
  ('statement -> ELIF','statement',1,'p_statement','parser.py',13),
  ('assignment_statement -> IDENTIFIER ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','parser.py',18),
  ('if_statement -> if_clause NEWLINE statement NEWLINE','if_statement',4,'p_if_statement','parser.py',22),
  ('if_clause -> KEYWORD expression','if_clause',2,'p_if_clause','parser.py',26),
  ('while_statement -> while_clause NEWLINE statement NEWLINE','while_statement',4,'p_while_statement','parser.py',30),
  ('while_clause -> KEYWORD expression','while_clause',2,'p_while_clause','parser.py',34),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','parser.py',38),
  ('expression -> NUMBER','expression',1,'p_expression','parser.py',43),
  ('expression -> FLOAT','expression',1,'p_expression','parser.py',44),
  ('expression -> BOOLEAN','expression',1,'p_expression','parser.py',45),
  ('expression -> CHAR','expression',1,'p_expression','parser.py',46),
  ('expression -> IDENTIFIER','expression',1,'p_expression','parser.py',47),
  ('expression -> STRING','expression',1,'p_expression','parser.py',48),
  ('expression -> math_expression','expression',1,'p_expression','parser.py',49),
  ('expression -> comparison_expression','expression',1,'p_expression','parser.py',50),
  ('expression -> logical_expression','expression',1,'p_expression','parser.py',51),
  ('math_expression -> expression MATH_OP expression','math_expression',3,'p_math_expression','parser.py',56),
  ('comparison_expression -> expression COMPARISON_OP expression','comparison_expression',3,'p_comparison_expression','parser.py',60),
  ('logical_expression -> expression LOGICAL_OP expression','logical_expression',3,'p_logical_expression','parser.py',64),
]
